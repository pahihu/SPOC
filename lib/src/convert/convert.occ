--{{{  File banner
-- @(#)=====================================================
-- @(#)  Project : GPMIMD ESPRIT P5404
-- @(#)  Authors : Mark Debbage, Mark Hill and Sean Wykes
-- @(#)            University of Southampton
--  
-- @(#)    Title : Conversion library
-- @(#)   System : Occam 2 C
-- @(#) Filename : convert.occ
-- @(#)  Version : 1.1
-- @(#)     Date : 12/10/93
-- @(#)====================================================
--}}}
#H #include <stdlib.h>
#H #include <math.h>
#H #include <errno.h>
#H #include <string.h>
--{{{  PROC INTTOSTRING(INT len,[]BYTE string,VAL INT n)
PROC INTTOSTRING(INT len,[]BYTE string,VAL INT n)
  INT val :
  BOOL neg :
  SEQ
    len := 0
    val := n
    neg :=  (n<0)
    WHILE (val>9)OR(val<(-9))
      SEQ
        IF
          neg
            string[len] := BYTE ((INT '0')-(val REM 10))
          TRUE
            string[len] := BYTE ((INT '0')+(val REM 10))
        len := len+1
        val := val/10
    IF
      neg
        SEQ
          string[len] := BYTE ((INT '0')-(val REM 10))
          len := len+1
          string[len]:='-'
      TRUE
        string[len] := BYTE ((INT '0')+(val REM 10))
    len := len+1
    SEQ i = 0 FOR len/2
      BYTE b :
      SEQ
        b := string[i]
        string[i] := string[(len-1)-i]
        string[(len-1)-i] := b
:
--}}}
--{{{  PROC INT16TOSTRING(INT len,[]BYTE string,VAL INT16 n)
PROC INT16TOSTRING(INT len,[]BYTE string,VAL INT16 n)
  INTTOSTRING(len,string,(INT n))
:
--}}}
--{{{  PROC INT32TOSTRING(INT len,[]BYTE string,VAL INT32 n) 
PROC INT32TOSTRING(INT len,[]BYTE string,VAL INT32 n) 
  INTTOSTRING(len,string,(INT n))
:
--}}}
--{{{  PROC INT64TOSTRING(INT len,[]BYTE string,VAL INT64 n)
PROC INT64TOSTRING(INT len,[]BYTE string,VAL INT64 n)
  INT64 val :
  BOOL neg :
  SEQ
    len := 0
    val := n
    neg :=  (n<0(INT64))
    WHILE (val>9(INT64))OR(val<(-9(INT64)))
      SEQ
        IF
          neg
            string[len] := BYTE ((INT64 '0')-(val REM 10(INT64)))
          TRUE
            string[len] := BYTE ((INT64 '0')+(val REM 10(INT64)))
        len := len+1
        val := val/10(INT64)
    IF
      neg
        SEQ
          string[len] := BYTE ((INT64 '0')-(val REM 10(INT64)))
          len := len+1
          string[len]:='-'
      TRUE
        string[len] := BYTE ((INT64 '0')+(val REM 10(INT64)))
    len := len+1
    SEQ i = 0 FOR len/2
      BYTE b :
      SEQ
        b := string[i]
        string[i] := string[(len-1)-i]
        string[(len-1)-i] := b
:
  
--}}}
--{{{  PROC STRINGTOINT(BOOL error, INT n,VAL []BYTE string) 
PROC STRINGTOINT(BOOL error, INT n,VAL []BYTE string) 
  BOOL neg :
  INT i :
  BOOL over :
  SEQ
    neg := FALSE
    error := FALSE
    over := FALSE
    n := 0
    IF
      (SIZE string)=0
        error := TRUE
      (string[0]='-') AND ((SIZE string)>1)
        SEQ
          i := 1
          neg := TRUE
      (string[0]='+') AND ((SIZE string)>1)
        i := 1
      TRUE
        i := 0
    WHILE ((NOT error) AND (i<(SIZE string)))
      SEQ
        IF 
          (string[i]>='0') AND (string[i]<='9')
            IF
              neg
                n := (n TIMES 10)MINUS((INT string[i])-(INT '0'))
              TRUE
                n := (n TIMES 10)PLUS((INT string[i])-(INT '0'))
          TRUE
            error := TRUE
        i := i + 1
        IF
          (neg AND (n>0)) OR ((NOT neg) AND (n<0))
            over := TRUE
          TRUE
            SKIP
    IF
      over
        error := TRUE
      TRUE
        SKIP
:
--}}}
--{{{  PROC STRINGTOINT16(BOOL error,INT16 n,VAL []BYTE string) 
PROC STRINGTOINT16(BOOL error,INT16 n,VAL []BYTE string) 
  --{{{  PROC INTTOINT16(VAL INT a, INT16 b, BOOL error)
  PROC INTTOINT16(VAL INT a, INT16 b, BOOL error)
    INT n :
    SEQ
      IF
        (a>(INT (MOSTPOS INT16))) OR (a<(INT (MOSTNEG INT16)))
          SEQ
            error := TRUE
            n := a /\ #FFFF
            IF
              n>#7FFF
                n:= -(n /\ #7FFF)
              TRUE
                SKIP
        TRUE
          n := a
      b := INT16 n
  :
  --}}}
  INT n.int :
  SEQ
    STRINGTOINT(error,n.int,string)
    INTTOINT16(n.int,n,error)
:
--}}}
--{{{  PROC STRINGTOINT32(BOOL error,INT32 n,VAL []BYTE string)
PROC STRINGTOINT32(BOOL error,INT32 n,VAL []BYTE string)
  INT n.int :
  SEQ
    STRINGTOINT(error,n.int,string)
    n := INT32 n.int
:
--}}}
--{{{  PROC STRINGTOINT64(BOOL error, INT64 n,VAL []BYTE string) 
PROC STRINGTOINT64(BOOL error, INT64 n,VAL []BYTE string) 
  BOOL neg :
  INT i :
  BOOL over :
  SEQ
    neg := FALSE
    error := FALSE
    over := FALSE
    n := 0(INT64)
    IF
      (SIZE string)=0
        error := TRUE
      (string[0]='-') AND ((SIZE string)>1)
        SEQ
          i := 1
          neg := TRUE
      (string[0]='+') AND ((SIZE string)>1)
        i := 1
      TRUE
        i := 0
    WHILE ((NOT error) AND (i<(SIZE string)))
      SEQ
        IF 
          (string[i]>='0') AND (string[i]<='9')
            IF
              neg
                n := (n TIMES 10(INT64)) MINUS ((INT64 string[i])-(INT64 '0'))
              TRUE
                n := (n TIMES 10(INT64)) PLUS ((INT64 string[i])-(INT64 '0'))
          TRUE
            error := TRUE
        i := i + 1
        IF
          (neg AND (n>0(INT64))) OR ((NOT neg) AND (n<0(INT64)))
            over := TRUE
          TRUE
            SKIP
    IF
      over
        error := TRUE
      TRUE
        SKIP
:
--}}}

--{{{  PROC HTOS (INT len, []BYTE string, VAL INT n, VAL INT npw)
PROC HTOS (INT len, []BYTE string, VAL INT n, VAL INT npw)
  PROC hex.digit (BYTE byte, VAL INT digit)
    SEQ
      IF
        digit < 10
          byte := (BYTE (digit + (INT '0')))
        digit < 16
          byte := (BYTE (digit + ((INT 'A') - 10)))
  :
  INT rest :
  SEQ
    rest := n
    SEQ i = 0 FOR npw
      SEQ
        hex.digit (string[(npw-1)-i], 15 /\ rest)
        rest := rest >> 4
    len := npw
:
--}}}
--{{{  PROC HEXTOSTRING(INT len,[]BYTE string,VAL INT n)
PROC HEXTOSTRING(INT len,[]BYTE string,VAL INT n)
  VAL []BYTE word RETYPES 1 :
  HTOS(len,string,INT n,2*(SIZE word))
:
--}}}
--{{{  PROC HEX16TOSTRING(INT len,[]BYTE string,VAL INT16 n)
PROC HEX16TOSTRING(INT len,[]BYTE string,VAL INT16 n)
  HTOS(len,string,INT n,4)
:
--}}}
--{{{  PROC HEX32TOSTRING(INT len,[]BYTE string,VAL INT32 n)
PROC HEX32TOSTRING(INT len,[]BYTE string,VAL INT32 n)
  HTOS(len,string,INT n,8)
:
--}}}
--{{{  PROC HEX64TOSTRING(INT len,[]BYTE string,VAL INT64 n)
PROC HEX64TOSTRING(INT len,[]BYTE string,VAL INT64 n)
  PROC hex.digit (BYTE byte, VAL INT digit)
    SEQ
      IF
        digit < 10
          byte := (BYTE (digit + (INT '0')))
        digit < 16
          byte := (BYTE (digit + ((INT 'A') - 10)))
  :
  INT64 rest :
  SEQ
    rest := n
    SEQ i = 0 FOR 16
      SEQ
        hex.digit (string[15-i],(INT (15(INT64) /\ rest)))
        rest := rest >> 4
    len := 16
:
--}}}
--{{{  PROC STRINGTOHEX(BOOL error, INT n, VAL []BYTE string)
PROC STRINGTOHEX(BOOL error, INT n, VAL []BYTE string)
  --{{{  BOOL,INT FUNCTION hex.digit(VAL BYTE b)
  BOOL,INT FUNCTION hex.digit(VAL BYTE b)
    BOOL error :
    INT n :
    VALOF
      IF
        (b>='0') AND (b<='9')
          SEQ
            n := (INT b)-(INT '0')
            error := FALSE
        (b>='A') AND (b<='F')
          SEQ
            n := (INT b)-((INT 'A') - 10)
            error := FALSE
        TRUE
          SEQ
            error := TRUE
            n := 0
      RESULT error,n
  :
  --}}}
  INT i :
  BOOL over :
  SEQ
    i := 0
    n := 0
    over := FALSE
    error := FALSE
    IF
      (SIZE string)>0
        WHILE ((NOT error) AND (i<(SIZE string)))
          INT nibble :
          SEQ
            error,nibble := hex.digit(string[i])
            IF
              error
                SKIP
              TRUE
                INT o :
                SEQ
                  i := i + 1
                  o, n := SHIFTLEFT(0,n,4)
                  n := n PLUS nibble
                  over := over OR (o<>0)
      TRUE
        error := TRUE
    IF
      over
        error := TRUE
      TRUE
        SKIP
:
--}}}
--{{{  PROC STRINGTOHEX16(BOOL error, INT16 n, VAL []BYTE string)
PROC STRINGTOHEX16(BOOL error, INT16 n, VAL []BYTE string)
  --{{{  PROC INTTOINT16(VAL INT a, INT16 b, BOOL error)
  PROC INTTOINT16(VAL INT a, INT16 b, BOOL error)
    INT n :
    SEQ
      n := a
      IF
        (n>#FFFF)
          SEQ
            error := TRUE
            n := n /\ #FFFF
        TRUE
          SKIP
      IF
        n>#7FFF
          n := -(n /\ #7FFF)
        TRUE
          SKIP
      b := INT16 n
  :
  --}}}
  INT n.int :
  SEQ
    STRINGTOHEX(error,n.int,string)
    INTTOINT16(n.int,n,error)
:
--}}}
--{{{  PROC STRINGTOHEX32(BOOL error,INT32 n,VAL []BYTE string)
PROC STRINGTOHEX32(BOOL error,INT32 n,VAL []BYTE string)
  INT n.int :
  SEQ
    STRINGTOHEX(error,n.int,string)
    n := INT32 n.int
:
--}}}
--{{{  PROC STRINGTOHEX64(BOOL error, INT64 n, VAL []BYTE string)
PROC STRINGTOHEX64(BOOL error, INT64 n, VAL []BYTE string)
  --{{{  BOOL,INT FUNCTION hex.digit(VAL BYTE b)
  BOOL,INT FUNCTION hex.digit(VAL BYTE b)
    BOOL error :
    INT n :
    VALOF
      IF
        (b>='0') AND (b<='9')
          SEQ
            n := (INT b)-(INT '0')
            error := FALSE
        (b>='A') AND (b<='F')
          SEQ
            n := (INT b)-((INT 'A') - 10)
            error := FALSE
        TRUE
          SEQ
            error := TRUE
            n := 0
      RESULT error,n
  :
  --}}}
  INT i :
  SEQ
    i := 0
    n := 0(INT64)
    error := FALSE
    IF
      (SIZE string)>0
        WHILE ((NOT error) AND (i<(SIZE string)))
          INT nibble :
          SEQ
            error,nibble := hex.digit(string[i])
            IF
              error
                SKIP
              TRUE
                INT o :
                SEQ
                  i := i + 1
                  n := n << 4
                  n := n PLUS (INT64 nibble)
      TRUE
        error := TRUE
    IF
      i > 16  -- Overflow
        error := TRUE
      TRUE
        SKIP
:
--}}}

--{{{  PROC REAL32TOSTRING(INT l,[]BYTE string, VAL REAL32 r, VAL INT m,n)
PROC REAL32TOSTRING(INT l,[]BYTE string, VAL REAL32 r, VAL INT m,n)
  INT len :
  [100]BYTE tmp :
  SEQ
    IF
      (m=0) AND (n=0)
        SEQ
          #C sprintf((char*)$tmp,"%G",(REAL64)$r);
          #C $len = strlen((char*)$tmp);
      (m>0) AND (n>=0)
        SEQ
          #C sprintf((char*)$tmp,"%*.*f",(int)($m+$n),(int)$n,(REAL64)$r);
          #C $len = strlen((char*)$tmp);
      (m=0) AND (n>=0)
        SEQ
          #C sprintf((char*)$tmp,"%*.*E",(int)($n+6),(int)$n,(REAL64)$r);
          #C $len = strlen((char*)$tmp);
    IF
      (len<(SIZE tmp))AND((SIZE string)>=len)
        [string FROM 0 FOR len] := [tmp FROM 0 FOR len]
    l := len
:
--}}}
--{{{  PROC REAL64TOSTRING(INT l,[]BYTE string, VAL REAL64 r, VAL INT m,n)
PROC REAL64TOSTRING(INT l,[]BYTE string, VAL REAL64 r, VAL INT m,n)
  INT len :
  [100]BYTE tmp :
  SEQ
    IF
      (m=0) AND (n=0)
        SEQ
          #C sprintf((char*)$tmp,"%G",$r);
          #C $len = strlen((char*)$tmp);
      (m>0) AND (n>=0)
        SEQ
          #C sprintf((char*)$tmp,"%*.*f",(int)($m+$n),(int)$n,$r);
          #C $len = strlen((char*)$tmp);
      (m=0) AND (n>=0)
        SEQ
          #C sprintf((char*)$tmp,"%*.*E",(int)($n+6),(int)$n,$r);
          #C $len = strlen((char*)$tmp);
    IF
      (len<(SIZE tmp))AND((SIZE string)>=len)
        [string FROM 0 FOR len] := [tmp FROM 0 FOR len]
    l := len
:
--}}}
--{{{  PROC STRINGTOREAL32(BOOL error,REAL32 n,VAL []BYTE string)
PROC STRINGTOREAL32(BOOL error,REAL32 n,VAL []BYTE string)
  [30]BYTE tmp :
  INT len :
  INT valid.len :
  SEQ
    IF
      (SIZE string)>=(SIZE tmp)
        len := (SIZE tmp)-1
      TRUE
        len := (SIZE string)
    [tmp FROM 0 FOR len ] := [string FROM 0 FOR len ]
    tmp[len] := BYTE '0'
    VAL s IS string[0] :
    IF
      ((s>='0')AND(s<='9'))OR(s='+')OR(s='-')
        error := FALSE
      TRUE
        error := TRUE
    #C { BYTE *v; $n = (REAL32) strtod((char*)$tmp,(char**)&v); $valid.len= v-((BYTE*) $tmp); }
    #C { if (errno==ERANGE) $error=true; }
    IF
      len>valid.len
        error := TRUE
      TRUE
        SKIP  
:
--}}}
--{{{  PROC STRINGTOREAL64(BOOL error,REAL64 n,VAL []BYTE string)
PROC STRINGTOREAL64(BOOL error,REAL64 n,VAL []BYTE string)
  [30]BYTE tmp :
  INT len :
  INT valid.len :
  SEQ
    IF
      (SIZE string)>=(SIZE tmp)
        len := (SIZE tmp)-1
      TRUE
        len := (SIZE string)
    [tmp FROM 0 FOR len ] := [string FROM 0 FOR len ]
    tmp[len] := BYTE '0'
    VAL s IS string[0] :
    IF
      ((s>='0')AND(s<='9'))OR(s='+')OR(s='-')
        error := FALSE
      TRUE
        error := TRUE
    #C { BYTE *v; $n = (REAL64) strtod((char*)$tmp,(char**)&v); $valid.len= v-((BYTE*) $tmp); }
    #C { if (errno==ERANGE) $error=true; }
    IF
      len>valid.len
        error := TRUE
      TRUE
        SKIP  
:
--}}}

--{{{  PROC STRINGTOBOOL(BOOL error, BOOL b,VAL []BYTE string)
PROC STRINGTOBOOL(BOOL error, BOOL b,VAL []BYTE string)
  VAL true IS "TRUE" :
  VAL false IS "FALSE" :
  SEQ
    error := FALSE
    IF
      (SIZE string) < (SIZE true)
        error := TRUE
      IF
        IF i = 0 FOR SIZE true
          string[i] <> true[i]
            IF
              (SIZE string) < (SIZE false)
                error := TRUE
              IF i = 0 FOR SIZE false
                string[i] <> false[i]
                  error := TRUE
              TRUE
                b := FALSE
        TRUE
          b := TRUE
      TRUE
        error := TRUE 
:
--}}}
--{{{  PROC BOOLTOSTRING(INT len,[]BYTE string,VAL BOOL b)
PROC BOOLTOSTRING(INT len,[]BYTE string,VAL BOOL b)
  IF
    b
      SEQ
        [string FROM 0 FOR 4] := "TRUE"
        len := 4
    TRUE
      SEQ
        [string FROM 0 FOR 5] := "FALSE"
        len := 5
:
--}}}
