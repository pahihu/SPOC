--{{{  File banner
-- @(#)=====================================================
-- @(#)  Project : GPMIMD ESPRIT P5404
-- @(#)  Authors : Mark Debbage, Mark Hill and Sean Wykes
-- @(#)            University of Southampton
--  
-- @(#)    Title : SPOC String library
-- @(#)   System : Occam 2 C
-- @(#) Filename : string.occ
-- @(#)  Version : 1.1
-- @(#)     Date : 12/10/93
-- @(#)====================================================
--}}}

#USE "convert.lib"

#H #include <ctype.h>
#H #include <string.h>

--{{{  BOOL FUNCTION is.in.range(VAL BYTE c, VAL BYTE lower, VAL BYTE upper)
BOOL FUNCTION is.in.range(VAL BYTE c, VAL BYTE lower, VAL BYTE upper)
  VALOF
    SKIP
    RESULT ((c >= lower)  AND  (c <= upper))
:
--}}}
--{{{  BOOL FUNCTION is.upper(VAL BYTE c)
BOOL FUNCTION is.upper(VAL BYTE c)
  BOOL res:
  VALOF
    #C $res = isupper($c);
    RESULT res
:
--}}}
--{{{  BOOL FUNCTION is.lower(VAL BYTE c)
BOOL FUNCTION is.lower(VAL BYTE c)
  BOOL res:
  VALOF
    #C $res = islower($c);
    RESULT res
:
--}}}
--{{{  BOOL FUNCTION is.digit(VAL BYTE c)
BOOL FUNCTION is.digit(VAL BYTE c)
  BOOL res:
  VALOF
    #C $res = isdigit($c);
    RESULT res
:
--}}}
--{{{  BOOL FUNCTION is.hex.digit(VAL BYTE c)
BOOL FUNCTION is.hex.digit(VAL BYTE c)
  BOOL res:
  VALOF
    #C $res = isdigit($c) || (toupper($c) >= 'A' && toupper($c) <= 'F'); 
    RESULT res
:
--}}}
--{{{  PROC to.upper.case([]BYTE str)
PROC to.upper.case(VAL []BYTE str)
  SEQ i = 0 FOR (SIZE  str)
    #C $str[$i] = toupper($str[$i]);
:
--}}}
--{{{  PROC to.lower.case([]BYTE str)
PROC to.lower.case(VAL []BYTE str)
  SEQ i = 0 FOR (SIZE  str)
    #C $str[$i] = tolower($str[$i]);
:
--}}}
--{{{  INT FUNCTION compare.strings(VAL []BYTE str1, VAL []BYTE str2)
INT FUNCTION compare.strings(VAL []BYTE s1, VAL []BYTE s2)
  INT order:
  VAL l1 IS (SIZE  s1):
  VAL l2 IS (SIZE  s2):
  VALOF
    INT len:
    SEQ
      IF
        (l1 > l2)
          len := l2
        TRUE
          len := l1
      #C $order = 2*strncmp((char*)$s1,(char*)$s2,$len); 
      IF
        (order=0) AND (l1 > l2)
          order := 1
        (order=0) AND (l2 > l1)
          order := -1
        TRUE
          SKIP
    RESULT order
:
--}}}
--{{{  BOOL FUNCTION eqstr(VAL []BYTE s1, VAL []BYTE s2)
BOOL FUNCTION eqstr(VAL []BYTE s1, VAL []BYTE s2)
  BOOL eq:
  VALOF
    VAL l1 IS (SIZE s1):
    VAL l2 IS (SIZE s2):
    #C $eq = ($l1 != $l2) ? false : (strcmp((char*)$s1,(char*)$s2) != 0);
    RESULT eq
:
--}}}

--{{{  PROC append.text(INT len, []BYTE str, VAL []BYTE text)
PROC append.text(INT len, []BYTE s, VAL []BYTE text)
  SEQ
    [s FROM len FOR (SIZE text)] := text
    len := len + (SIZE text)
:
--}}}
--{{{  INT FUNCTION char.pos(VAL BYTE c, VAL []BYTE s)
INT FUNCTION char.pos(VAL BYTE c, VAL []BYTE s)
  INT res:
  VALOF
    IF
      IF i = 0 FOR (SIZE  s)
        s[i] = c
          res := i
      TRUE
        res := -1
    RESULT res
:
--}}}

