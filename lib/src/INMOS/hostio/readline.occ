#COMMENT "Host i/o library, V1.00, 10/03/89"
#COMMENT "(c) Copyright INMOS Limited 1989"
#INCLUDE "hostio.inc"
#USE "splib.lib"

PROC so.read.line (CHAN OF SP fs, ts, INT len, []BYTE line, BYTE result)

  --{{{  specification
  -- Purpose:  To read a line from the keyboard without echoing it.
  -- Channels: fs - from server
  --           ts - to server
  -- Out:      len - the number of bytes in the parameter line that form
  --           the line that was read
  -- Out:      line - if result = spr.ok, the line that was read is in the
  --           first len bytes, the remaining bytes being undefined or if
  --           the supplied byte array was not large enough for the read
  --           line, the read line is truncated to fit; otherwise undefined
  -- Out:      result - spr.ok if the line was successfully read; otherwise
  --           >= spr.operation.failed - see hostio.inc or iserver
  --           documentation for further details
  -- Notes:    The line to be read is considered terminated by a carriage
  --           return, ie ASCII ^M, which has value #0D = 13.  This
  --           carriage return is not included in the line, and nor is a
  --           newline ( ASCII ^J, #0A = 10 ) if present in the input.
  --           If an error occurs whilst reading the line this routine
  --           terminates immediately.
  --}}}
  --{{{  declarations
  BOOL running :
  BYTE key :
  
  VAL delete    IS 127(BYTE) :
  VAL backspace IS   8(BYTE) :
  --}}}

  SEQ
    len := 0
    running := TRUE
    WHILE running
      SEQ
        sp.getkey (fs, ts, key, result)
        IF
          result = spr.ok
            --{{{  add to line, and check for '*c'
            IF
              --{{{  return key - finished
              key = '*c'
                running := FALSE
              --}}}
              --{{{  newline key - skip
              key = '*n'
                SKIP
              --}}}
              --{{{  delete key
              (key = delete) OR (key = backspace)
                IF
                  len > 0
                    len := len - 1
                  TRUE
                    SKIP
              --}}}
              --{{{  it fits on the line, add it
              len < (SIZE line)
                SEQ
                  line [len] := key
                  len := len + 1
              --}}}
              --{{{  otherwise skip
              TRUE
                SKIP
              --}}}
            --}}}  add to line, and check for '*c'
          TRUE
            running := FALSE
:
