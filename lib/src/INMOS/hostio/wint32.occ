#COMMENT "Hostio library, V1.0, 19/04/90"
#COMMENT "(c) Copyright INMOS Limited 1990"
#INCLUDE "hostio.inc"
#USE "splib.lib"
#USE "convert.lib"
--{{{  so.fwrite.int32
PROC so.fwrite.int32 (CHAN OF SP fs, ts, VAL INT32 streamid, n, VAL INT width,
                      BYTE result)

  --{{{  specification
  -- Purpose:  To write to the specified file stream a 32-bit integer as
  --           decimal ASCII digits, padded out with leading spaces and an
  --           optional sign to the specified field width.
  -- Channels: fs - from server
  --           ts - to server
  -- In:       streamid - the identification number of the stream to which
  --           the string representing the integer is to be sent
  -- In:       n - the 32-bit integer that is desired to be written
  -- In:       width - the desired field width of the string
  -- Out:      result - equal to spr.ok if the string was written all right;
  --           otherwise not all of the string could be written, in which case
  --           result takes on a value of spr.notok
  -- Notes:    If the field width is too small for the number, then it is
  --           widened as necessary; a zero value for the field width will
  --           give minimum width; a negative field width is an error.
  --}}}

  IF
    width < 0
      STOP
    TRUE
      [11]BYTE string :  -- 11 digits in -2147483648 = MOSTNEG INT32
      INT len, len.done :
      SEQ
        INT32TOSTRING (len, string, n)
        --{{{  output any necessary spaces
        VAL spaces IS "                    " :  -- 20 spaces
        INT number.of.spaces, fill.this.time :
        SEQ
          number.of.spaces := width - len
          WHILE number.of.spaces > 0
            SEQ
              IF
                number.of.spaces > (SIZE spaces)
                  fill.this.time := SIZE spaces
                TRUE
                  fill.this.time := number.of.spaces
              sp.write (fs, ts, streamid, [spaces FROM 0 FOR fill.this.time],
                        len.done, result)
              number.of.spaces := number.of.spaces - fill.this.time
        --}}}output any necessary spaces
        sp.write (fs, ts, streamid, [string FROM 0 FOR len], len.done, result)
        --{{{  check operation was ok
        IF
          (result = spr.ok) AND (len.done <> len)
            result := spr.notok
          TRUE
            SKIP
        --}}}check operation was ok
:
--}}}so.fwrite.int32
--{{{  so.write.int32
PROC so.write.int32 (CHAN OF SP fs, ts, VAL INT32 n, VAL INT width)

  --{{{  specification
  -- Purpose:  To write to standard out a 32-bit integer as decimal
  --           ASCII digits, padded out with leading spaces and an
  --           optional sign to the specified field width.
  -- Channels: fs - from server
  --           ts - to server
  -- In:       n - the 32-bit integer that is desired to be written
  -- In:       width - the desired field width of the string
  -- Notes:    If the field width is too small for the number, then it is
  --           widened as necessary; a zero value for the field width will
  --           give minimum width; a negative field width is an error.
  --}}}

  BYTE result :
  so.fwrite.int32 (fs, ts, spid.stdout, n, width, result)
:
--}}}so.write.int32
