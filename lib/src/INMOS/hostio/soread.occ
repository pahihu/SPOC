#COMMENT "Host i/o library, V1.2, 16/08/90"
#COMMENT "(c) Copyright INMOS Limited 1989"
#INCLUDE "hostio.inc"
#USE "readwrit.lib" -- for sp.read
--{{{  so.read
PROC so.read (CHAN OF SP fs, ts, VAL INT32 streamid,
              INT bytes.read, []BYTE data)

  --{{{  specification
  -- Purpose:  To read an unlimited number of bytes from a stream.
  -- Channels: fs - from server
  --           ts - to server
  -- In:       streamid - the identification number of the open stream to be
  --           read from
  -- Out:      bytes.read - this gives the number of bytes read from the file;
  --           these bytes will be [data FROM 0 FOR bytes.read]; if
  --           bytes.read <> (SIZE data) then either an error occurred or
  --           the end of the file was reached.
  -- Out:      data - this contains the bytes read from the file; the number
  --           of bytes requested to be read is (SIZE data).
  --}}}
  --{{{  more information
  -- Notes:    If more than a packet's worth of data is to be read
  --           from a file then one cannot guarantee that all of the data
  --           will be read from the file before any other process
  --           accesses the same file.
  --}}}
  --{{{  history
  -- Removed unnecessary use of test (result = spr.ok) from WHILE loop
  -- condition since present implementation of sp.read always returns
  -- spr.ok; V1.1, SRH 14-May-90
  -- Altered one of the WHILE loop conditions from ( length.got <> 0 )
  -- to, effectively, ( length.got = length.to.get ); V1.2, SRH 16-Aug-90
  --}}}

  BOOL reading :
  SEQ
    bytes.read := 0
    reading := TRUE
    WHILE reading AND (bytes.read < (SIZE data))
      INT length.got, length.to.get :
      SEQ
        IF
          ((SIZE data) - bytes.read) > sp.max.readbuffer.size
            length.to.get := sp.max.readbuffer.size
          TRUE
            length.to.get := ((SIZE data) - bytes.read)

        BYTE result :  -- a dummy in this routine
        sp.read (fs, ts, streamid, length.got,
                 [data FROM bytes.read FOR length.to.get], result)
        bytes.read := bytes.read + length.got
        reading := ( length.got = length.to.get )
:
--}}}so.read
