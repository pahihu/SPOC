#COMMENT "Host i/o library, V1.1, 13/06/90"
#COMMENT "(c) Copyright INMOS Limited 1989"
#INCLUDE "hostio.inc"
#USE "splib.lib"
#USE "convert.lib"
--{{{  history
-- Made it explicit that a negative field width was an error.  New version
-- is 1.1; 13-June-90 SRH
--}}}
--{{{  so.fwrite.hex.int
PROC so.fwrite.hex.int (CHAN OF SP fs, ts, VAL INT32 streamid,
                        VAL INT n, width, BYTE result)

  --{{{  specification
  -- Purpose:  To write an integer as hexadecimal ASCII characters
  --           preceded by the '#' character to a stream.
  -- Channels: fs - from server
  --           ts - to server
  -- In:       streamid - the identification number of the stream to write to
  -- In:       n - the integer to write out
  -- In:       width - the field width to use when writing the hex;
  --           if width is larger than the size of the number then the
  --           number is padded with leading 0's or F's as appropriate;
  --           if width is smaller than the size of the number then the
  --           number is truncated at the left to width characters;
  --           width does not take the '#' into account;
  --           a negative field width is an error
  -- Out:      result - spr.ok if the integer was successfully written;
  --           otherwise not all of the string could be written, in which case
  --           result takes on a value of spr.notok
  --}}}

  IF
    width < 0
      STOP
    TRUE
      [8]BYTE string :
      INT len, len.done :
      SEQ
        HEXTOSTRING (len, string, n)
        sp.write (fs, ts, streamid, "#", len.done, result)
        --{{{  sign extend if necessary
        VAL size.fill.string IS 10 :
        VAL [size.fill.string]BYTE zeroes IS "0000000000" :
        VAL [size.fill.string]BYTE effs   IS "FFFFFFFFFF" :
        --{{{  sign.extend
        PROC sign.extend (VAL INT how.many, VAL [size.fill.string]BYTE fill.string)
          INT number.to.fill, fill.this.time :
          SEQ
            number.to.fill := how.many
            WHILE number.to.fill > 0
              SEQ
                IF
                  number.to.fill > (SIZE fill.string)
                    fill.this.time := SIZE fill.string
                  TRUE
                    fill.this.time := number.to.fill
        
                sp.write (fs, ts, streamid, [fill.string FROM 0 FOR fill.this.time],
                          len.done, result)
                number.to.fill := number.to.fill - fill.this.time
        :
        --}}}sign.extend
        
        IF
          n < 0
            sign.extend (width - len, effs)
          TRUE
            sign.extend (width - len, zeroes)
        --}}}sign extend if necessary
        --{{{  output the number, truncated if necessary
        INT start :
        SEQ
          IF
            len > width
              SEQ
                start := len - width
                len   := width
            TRUE
              start := 0
          sp.write (fs, ts, streamid, [string FROM start FOR len], len.done, result)
        --}}}output the number, truncated if necessary
        --{{{  check operation was ok
        IF
          (result = spr.ok) AND (len.done <> len)
            result := spr.notok
          TRUE
            SKIP
        --}}}check operation was ok
:
--}}}so.fwrite.hex.int
--{{{  so.write.hex.int
PROC so.write.hex.int (CHAN OF SP fs, ts, VAL INT n, width)

  --{{{  specification
  -- Purpose:  To write an integer as hexadecimal ASCII characters
  --           preceded by the '#' character to standard out.
  -- Channels: fs - from server
  --           ts - to server
  -- In:       n - the integer to write out
  -- In:       width - the field width to use when writing the hex;
  --           if width is larger than the size of the number then the
  --           number is padded with leading 0's or F's as appropriate;
  --           if width is smaller than the size of the number then the
  --           number is truncated at the left to width characters;
  --           width does not take the '#' into account;
  --           a negative field width is an error
  --}}}

  BYTE result :
  so.fwrite.hex.int (fs, ts, spid.stdout, n, width, result)
:
--}}}so.write.hex.int
