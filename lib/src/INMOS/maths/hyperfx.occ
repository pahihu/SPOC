#OPTION "V"  -- no vector space
#COMMENT "Fixed point maths library, V1.2 27/03/90"
#COMMENT "(c) Copyright INMOS Limited 1988"
#INCLUDE "t4fhdr.inc"
#ifdef OCCAM
#PRAGMA TRANSLATE IncExp "IncExp%O"
#PRAGMA TRANSLATE FIX "FIX%O"
#PRAGMA TRANSLATE ReFloat "ReFloat%O"
#PRAGMA TRANSLATE FracDiv "FracDiv%O"
#else
#ifdef C
#PRAGMA TRANSLATE SINH "SINH%c"
#PRAGMA TRANSLATE COSH "COSH%c"
#PRAGMA TRANSLATE TANH "TANH%c"
#PRAGMA TRANSLATE IncExp "IncExp%c"
#PRAGMA TRANSLATE FIX "FIX%c"
#PRAGMA TRANSLATE ReFloat "ReFloat%c"
#PRAGMA TRANSLATE FracDiv "FracDiv%c"
#else
#ifdef FORTRAN
#PRAGMA TRANSLATE SINH "SINH%f"
#PRAGMA TRANSLATE SINHP "SINHP%f"
#PRAGMA TRANSLATE COSH "COSH%f"
#PRAGMA TRANSLATE COSHP "COSHP%f"
#PRAGMA TRANSLATE TANH "TANH%f"
#PRAGMA TRANSLATE TANHP "TANHP%f"
#PRAGMA TRANSLATE IncExp "IncExp%f"
#PRAGMA TRANSLATE FIX "FIX%f"
#PRAGMA TRANSLATE ReFloat "ReFloat%f"
#PRAGMA TRANSLATE FracDiv "FracDiv%f"
#endif
#endif
#endif
#USE "utilstb.lib"

--{{{  history
-- V1.0 1-Jul-88
-- V1.1 11-Oct-88
-- Added OPTION "V"; V1.2 27-Mar-90 SRH
--}}}

--{{{  SINH  (fixed point)
REAL32 FUNCTION SINH (VAL REAL32 X)

  --{{{  exp
  REAL32 FUNCTION exp (VAL REAL32 X)
    -- exponential without input guards, for hyperbolic functions
    REAL32 RWork :
    VALOF
      VAL REAL32 InvLn2 RETYPES #3FB8AA3B(INT32) : -- 1/log(2) in floating poin
      VAL REAL32 C1     RETYPES #3F318000(INT32) : -- C1 + C2 = Ln(2)
      VAL REAL32 C2     RETYPES #B95E8083(INT32) :
      VAL N IS INT ROUND (X * InvLn2) :   -- integer part of X/ln(2)
      REAL32 XWork :
      SEQ
        VAL XN IS REAL32 ROUND N :
        XWork := ( X - (XN * C1)) - (XN * C2) -- higher precision remainder
        --{{{  compute exponential of remainder
        VAL P1   IS #00885308(INT) :
        VAL P0   IS #1FFFFFFF(INT) :
        VAL Q1   IS #0665FAD9(INT) :
        VAL Half IS #40000000(INT) :
        INT G, Z :
        SEQ
          G := FIX (XWork)
          Z := FRACMUL (G, G)
          G := FRACMUL (G, FRACMUL (Z, P1) + P0)
          RWork := ReFloat(Half + FracDiv(G, (FRACMUL(Z, Q1) + Half) - G))
        --}}}
        --{{{  construct result
        INT RExp, RTemp :
        INT RWork.i RETYPES RWork :
        SEQ
          INT T :
          RTemp, RExp, T := UNPACKSN (RWork.i)
          RWork.i := ROUNDSN (RExp + (N + 1), RTemp, 0)
        --}}}
      RESULT RWork
  :
  --}}}

  -- NB : This function requires exp to be in scope.
  REAL32 RWork :
  VALOF
    --{{{  definitions and variables
    VAL XMax IS #42B2CCCD(INT) : -- a little less than ln(Inf - 1) + LnV
    VAL XBig IS #41051EB8(INT) : -- BitsInFrac*(Ln2/2)
    VAL Eps  IS #39800000(INT) :
    VAL REAL32 VBy2M1 RETYPES #37680897(INT32) :
    VAL REAL32 LnV    RETYPES #3F317300(INT32) :
    VAL INT X.I       RETYPES X :
    VAL INT XW.i      IS      X.I /\ (~(MOSTNEG INT)) :
    VAL REAL32 XWork  RETYPES XW.i :  -- XWork = |X|
    --}}}
    IF
      XW.i > RealInf -- X is NaN
        RWork := X
      XW.i > XMax
        --{{{  + or - Inf
        IF
          X.I < 0
            -- RWork := - RInf
            RWork := MINUSX(RInf)
          TRUE
            RWork := RInf
        --}}}
      XW.i < Eps
        RWork := X
      XW.i > XBig
        --{{{  modify argument and use exponential
        VAL EX IS exp (XWork - LnV) :
        IF
          X.I < 0
            RWork := - (EX + (EX * VBy2M1))
          TRUE
            RWork := EX + (EX * VBy2M1)
        --}}}
      XW.i >= unity
        --{{{  use exponential and modify result
        VAL EX IS exp (XWork) :
        IF
          X.I < 0
            RWork := - IncExp(EX - (One/EX), -1)
          TRUE
            RWork := IncExp(EX - (One/EX), -1)
        --}}}
      TRUE
        --{{{  use fixed-point rational approximation
        INT G :
        SEQ
          G := FIX (XWork)
          G := FRACMUL (G, G)    -- polynomial in XWork^2
          RWork := ReFloat (FRACMUL (FRACMUL (FRACMUL (#0006AEC6, G) +
                            #0110F45E, G) + #15555AF7, G))
          IF
            X.I < 0
              RWork := - (XWork + (RWork * XWork))
            TRUE
              RWork := XWork + (RWork * XWork)
        --}}}
    RESULT RWork
:
--}}}
--{{{  COSH  (fixed point)
REAL32 FUNCTION COSH (VAL REAL32 X)

  --{{{  exp
  REAL32 FUNCTION exp (VAL REAL32 X)
    -- exponential without input guards, for hyperbolic functions
    REAL32 RWork :
    VALOF
      VAL REAL32 InvLn2 RETYPES #3FB8AA3B(INT32) : -- 1/log(2) in floating poin
      VAL REAL32 C1     RETYPES #3F318000(INT32) : -- C1 + C2 = Ln(2)
      VAL REAL32 C2     RETYPES #B95E8083(INT32) :
      VAL N IS INT ROUND (X * InvLn2) :   -- integer part of X/ln(2)
      REAL32 XWork :
      SEQ
        VAL XN IS REAL32 ROUND N :
        XWork := ( X - (XN * C1)) - (XN * C2) -- higher precision remainder
        --{{{  compute exponential of remainder
        VAL P1   IS #00885308(INT) :
        VAL P0   IS #1FFFFFFF(INT) :
        VAL Q1   IS #0665FAD9(INT) :
        VAL Half IS #40000000(INT) :
        INT G, Z :
        SEQ
          G := FIX (XWork)
          Z := FRACMUL (G, G)
          G := FRACMUL (G, FRACMUL (Z, P1) + P0)
          RWork := ReFloat(Half + FracDiv(G, (FRACMUL(Z, Q1) + Half) - G))
        --}}}
        --{{{  construct result
        INT RExp, RTemp :
        INT RWork.i RETYPES RWork :
        SEQ
          INT T :
          RTemp, RExp, T := UNPACKSN (RWork.i)
          RWork.i := ROUNDSN (RExp + (N + 1), RTemp, 0)
        --}}}
      RESULT RWork
  :
  --}}}

  -- NB : This function requires exp to be in scope.
  REAL32 RWork :
  VALOF
    --{{{  definitions and variables
    VAL XMax IS #42B2CCCD(INT) :   -- a little less than ln(Inf - 1) + LnV
    VAL XBig IS #41051EB8(INT) :   -- BitsInFrac*(Ln2/2)
    VAL Eps  IS #39800000(INT) :
    VAL REAL32 LnV    RETYPES #3F317300(INT) :
    VAL REAL32 VBy2M1 RETYPES #37680897(INT) :
    VAL INT X.I       RETYPES X :
    VAL INT XW.i IS X.I /\ (~(MOSTNEG INT)) :
    VAL REAL32 XWork RETYPES XW.i : -- XWork := |X|
    --}}}
    IF
      XW.i > RealInf -- X is NaN
        RWork := X
      XW.i > XMax
        RWork := RInf
      XW.i > XBig
        VAL EX IS exp (XWork - LnV) :
        RWork := EX + (EX * VBy2M1)
      TRUE
        VAL EX IS exp (XWork) :
        RWork := IncExp(EX + (One/EX), -1)
    RESULT RWork
:
--}}}
--{{{  TANH  (fixed point)
REAL32 FUNCTION TANH (VAL REAL32 X)

  --{{{  exp
  REAL32 FUNCTION exp (VAL REAL32 X)
    -- exponential without input guards, for hyperbolic functions
    REAL32 RWork :
    VALOF
      VAL REAL32 InvLn2 RETYPES #3FB8AA3B(INT32) : -- 1/log(2) in floating poin
      VAL REAL32 C1     RETYPES #3F318000(INT32) : -- C1 + C2 = Ln(2)
      VAL REAL32 C2     RETYPES #B95E8083(INT32) :
      VAL N IS INT ROUND (X * InvLn2) :   -- integer part of X/ln(2)
      REAL32 XWork :
      SEQ
        VAL XN IS REAL32 ROUND N :
        XWork := ( X - (XN * C1)) - (XN * C2) -- higher precision remainder
        --{{{  compute exponential of remainder
        VAL P1   IS #00885308(INT) :
        VAL P0   IS #1FFFFFFF(INT) :
        VAL Q1   IS #0665FAD9(INT) :
        VAL Half IS #40000000(INT) :
        INT G, Z :
        SEQ
          G := FIX (XWork)
          Z := FRACMUL (G, G)
          G := FRACMUL (G, FRACMUL (Z, P1) + P0)
          RWork := ReFloat(Half + FracDiv(G, (FRACMUL(Z, Q1) + Half) - G))
        --}}}
        --{{{  construct result
        INT RExp, RTemp :
        INT RWork.i RETYPES RWork :
        SEQ
          INT T :
          RTemp, RExp, T := UNPACKSN (RWork.i)
          RWork.i := ROUNDSN (RExp + (N + 1), RTemp, 0)
        --}}}
      RESULT RWork
  :
  --}}}

  -- NB : This function requires exp to be in scope.
  REAL32 RWork :
  VALOF
    --{{{  definitions
    VAL XMax IS #41051592(INT) :      -- ((BitsInFrac + 2)ln2)/2, see C&W p242.
    VAL Eps  IS #39800000(INT) :
    VAL Ln3By2 IS #3F0C9F54(INT) :
    VAL INT X.I  RETYPES X :
    VAL INT XW.i IS X.I /\ (~(MOSTNEG INT)) :
    VAL REAL32 XWork RETYPES XW.i : -- XWork = |X|
    --}}}
    IF
      XW.i > RealInf -- X is NaN
        RWork := X  -- transmit NaN
      TRUE
        SEQ
          IF
            XW.i > XMax
              RWork := One
            XW.i > Ln3By2
              RWork := One - (Two/(One + exp (IncExp(XWork, 1))))
            XW.i < Eps
              RWork := XWork
            TRUE
              --{{{  fixed-point rational approximation
              INT G :
              SEQ
                G := FIX (XWork)
                G := FRACMUL (G, G) -- rational function of XWork^2
                RWork := XWork + (ReFloat (FRACMUL (FracDiv (FRACMUL (#FFE09DCA,
                                                                      G) + #E5A3A733,
                         FRACMUL (#20000000, G) + #4F150CF5), G)) * XWork)
              --}}}
          IF
            X.I < 0
              RWork := - RWork
            TRUE
              SKIP
    RESULT RWork
:
--}}}

#ifdef FORTRAN
--{{{  SINHP
REAL32 FUNCTION SINHP( VAL INT dummy, VAL INT X )

  -- SINHP exists for when the FORTRAN intrinsic SINH is passed as a
  -- parameter to a routine.  The FORTRAN compiler will see the interface
  -- to SINHP.  When SINHP is called from FORTRAN the default FORTRAN
  -- calling conventions are used, i.e. pass a gsb pointer and pass
  -- parameters by reference.  Due to these facts SINHP has a dummy
  -- parameter to catch the gsb and ASM code to dereference its argument
  -- which is in fact a pointer to the true argument.
  -- We use INTs as arguments for SINHP because an INT has the same size
  -- as a pointer.

  REAL32 Xtemp :
  VALOF
    ASM
      LD       X
      LDNL     0
      ST       Xtemp
    RESULT SINH( Xtemp )
:
--}}}
--{{{  COSHP
REAL32 FUNCTION COSHP( VAL INT dummy, VAL INT X )

  -- COSHP exists for when the FORTRAN intrinsic COSH is passed as a
  -- parameter to a routine.  The FORTRAN compiler will see the interface
  -- to COSHP.  When COSHP is called from FORTRAN the default FORTRAN
  -- calling conventions are used, i.e. pass a gsb pointer and pass
  -- parameters by reference.  Due to these facts COSHP has a dummy
  -- parameter to catch the gsb and ASM code to dereference its argument
  -- which is in fact a pointer to the true argument.
  -- We use INTs as arguments for COSHP because an INT has the same size
  -- as a pointer.

  REAL32 Xtemp :
  VALOF
    ASM
      LD       X
      LDNL     0
      ST       Xtemp
    RESULT COSH( Xtemp )
:
--}}}
--{{{  TANHP
REAL32 FUNCTION TANHP( VAL INT dummy, VAL INT X )

  -- TANHP exists for when the FORTRAN intrinsic TANH is passed as a
  -- parameter to a routine.  The FORTRAN compiler will see the interface
  -- to TANHP.  When TANHP is called from FORTRAN the default FORTRAN
  -- calling conventions are used, i.e. pass a gsb pointer and pass
  -- parameters by reference.  Due to these facts TANHP has a dummy
  -- parameter to catch the gsb and ASM code to dereference its argument
  -- which is in fact a pointer to the true argument.
  -- We use INTs as arguments for TANHP because an INT has the same size
  -- as a pointer.

  REAL32 Xtemp :
  VALOF
    ASM
      LD       X
      LDNL     0
      ST       Xtemp
    RESULT TANH( Xtemp )
:
--}}}
#endif
