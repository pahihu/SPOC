#OPTION "V"  -- no vector space
#COMMENT "Floating point maths library, V1.1 27/03/90"
#COMMENT "(c) Copyright INMOS Limited 1988"
#INCLUDE "mathhdr.inc"
#ifdef C
#PRAGMA TRANSLATE DSIN "DSIN%c"
#else
#ifdef FORTRAN
#PRAGMA TRANSLATE DSIN "DSIN%f"
#PRAGMA TRANSLATE DSINP "DSINP%f"
#PRAGMA TRANSLATE DSINPP "DSINPP%f"
#endif
#endif

REAL64 FUNCTION DSIN (VAL REAL64 X)

  --{{{  history
  -- V1.0 1-Jul-88
  -- Added OPTION "V"; V1.1 27-Mar-90 SRH
  --}}}

  REAL64 RWork :
  VALOF
    IF
      DNOTFINITE (X)
        --{{{  Inf or NaN
        IF
          DISNAN (X)
            RWork := X    -- transmit NaN
          TRUE
            RWork := Dundefined.NaN
        --}}}
      TRUE
        --{{{  variables
        REAL64 XWork :
        INT32 N :
        BOOL ok :
        --}}}
        SEQ
          ok, N, XWork := DARGUMENT.REDUCE (X, DPi, DPi.err)
          IF
            ok    -- argument reduction was accurate
              SEQ
                --{{{  approximation in primary range
                IF
                  DABS(XWork) > Nearly.DPiBy2 -- cutoff to ensure result <= 1.0
                    IF
                      XWork > DZero
                        RWork := DOne
                      TRUE
                        RWork := - DOne
                  TRUE
                    -- XWork is in the range [-Nearly.DPiBy2, Nearly.DPiBy2]
                    -- This implementation uses a polynomial approximation from
                    -- Cody & Waite "Software Manual for the Elementary Functions"
                    -- pp125-138. The floating point version is used here.
                    --{{{  decimal coefficients
                    VAL R0 IS   2.7204790957888846175E-15(REAL64) :
                    VAL R1 IS  -7.6429178068910467734E-13(REAL64) :
                    VAL R2 IS   1.6058936490371589114E-10(REAL64) :
                    VAL R3 IS  -2.5052106798274584544E-8(REAL64) :
                    VAL R4 IS   2.7557319210152756119E-6(REAL64) :
                    VAL R5 IS  -1.9841269841201840457E-4(REAL64) :
                    VAL R6 IS   8.3333333333331650314E-3(REAL64) :
                    VAL R7 IS  -1.6666666666666665052E-1(REAL64) :
                    --}}}
                    VAL REAL64 G IS XWork * XWork :
                    RWork := ((((((((((((((((G*R0)+R1)*G)+R2)*G)+R3)*G)+R4)*G)+
                               R5)*G)+R6)*G)+R7)*G) * XWork) + XWork
                --}}}
                --{{{  set sign
                IF
                  ((N /\ one) = one)
                    RWork := - RWork
                  TRUE
                    SKIP
                --}}}
            TRUE  -- argument reduction inaccurate
              RWork := Dinexact.NaN
    RESULT RWork
:
#ifdef FORTRAN
--{{{  DSINP/DSINPP
-- This 'P' version exists for when the FORTRAN intrinsic DSIN is passed as
-- a parameter to a routine.  The FORTRAN compiler will see the interface to
-- DSINP.  When DSINP is called from FORTRAN the default FORTRAN calling
-- conventions are used, i.e. pass a gsb pointer and pass parameters by
-- reference.  Due to these facts DSINP has a dummy parameter to catch the gsb.
#ifdef FPU
-- On the T8 the REAL64 result is passed back on the floating point
-- stack by occam.  This is the same in FORTRAN and so no special code is
-- required here.  The dummy parameter comes first to take the gsb followed
-- by the REAL64 value. The occam calling convention is to pass REAL64s
-- by reference, so this parameter should match already.

REAL64 FUNCTION DSINP( VAL INT dummy, VAL REAL64 X ) IS DSIN( X ) :
#else
-- On a non-floating point processor the REAL64 result is passed back by
-- way of a pointer to a result variable by both occam and FORTRAN.  If the
-- routine is written as a function then this result variable is expected
-- by occam to be the first parameter passed onto the stack.  This is not
-- the case in FORTRAN where the first parameter put onto the stack is
-- the gsb, the result parameter follows the gsb.  So the order of the
-- dummy and the result in occam is opposite to that in FORTRAN.   In order
-- to be able to pick up the result pointer we must write the routine as a
-- procedure and cope with the result pointer ourselves.  Therefore, the
-- first parameter is the dummy, the second is the result pointer.  Then
-- comes the REAL64 value.  The occam calling convention is to pass
-- REAL64s by reference, so this parameter should match already.

PROC DSINPP( VAL INT dummy, REAL64 result, VAL REAL64 X )
  result := DSIN( X )
:
#endif
--}}}
#endif
