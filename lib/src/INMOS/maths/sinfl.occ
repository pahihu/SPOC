#OPTION "V"  -- no vector space
#COMMENT "Floating point maths library, V1.1 27/03/90"
#COMMENT "(c) Copyright INMOS Limited 1988"
#INCLUDE "mathhdr.inc"
#ifdef C
#PRAGMA TRANSLATE SIN "SIN%c"
#else
#ifdef FORTRAN
#PRAGMA TRANSLATE SIN "SIN%f"
#PRAGMA TRANSLATE SINP "SINP%f"
#endif
#endif

REAL32 FUNCTION SIN (VAL REAL32 X)

  --{{{  history
  -- V1.0 1-Jul-88
  -- Added OPTION "V"; V1.1 27-Mar-90 SRH
  --}}}

  REAL32 RWork :
  VALOF
    IF
      NOTFINITE (X)
        --{{{  NaN or Inf
        IF
          ISNAN (X)
            RWork := X    -- transmit NaN
          TRUE
            RWork := undefined.NaN
        --}}}
      TRUE
        INT32 N :
        REAL32 XWork :
        IF
          ABS(X) > SMax
            RWork := inexact.NaN
          TRUE
            SEQ
              --{{{  reduce argument
              N := INT32 ROUND (X * InvPi)
              XWork := REAL32 ROUND ((REAL64 X) - ((REAL64 ROUND N) * DPi))
              --}}}
              --{{{  approximation in primary range
              IF
                ABS(XWork) > Nearly.PiBy2  -- trap to ensure |result| <= 1
                  IF
                    XWork < Zero
                      RWork := - One
                    TRUE
                      RWork := One
                TRUE
                  -- XWork is in the range [-Nearly.PiBy2, Nearly.PiBy2]
                  -- This implementation uses a polynomial approximation from
                  -- Cody & Waite "Software Manual for the Elementary Functions",
                  -- pp125-138. The floating point version is used here.
                  VAL R IS [2.601903036E-6(REAL32), -1.980741872E-4(REAL32),
                            8.333025139E-3(REAL32), -1.666665668E-1(REAL32)] :
                  VAL REAL32 G IS XWork * XWork :
                  RWork := ((((((((R[0]*G)+R[1])*G)+R[2])*G)+R[3])*G)*XWork)+XWork
              --}}}
              --{{{  set sign
              IF
                (N /\ one) = one
                  RWork := - RWork
                TRUE
                  SKIP
              --}}}
    RESULT RWork
:
#ifdef FORTRAN
--{{{  SINP
REAL32 FUNCTION SINP( VAL INT dummy, VAL INT X )

  -- SINP exists for when the FORTRAN intrinsic SIN is passed as a
  -- parameter to a routine.  The FORTRAN compiler will see the interface
  -- to SINP.  When SINP is called from FORTRAN the default FORTRAN
  -- calling conventions are used, i.e. pass a gsb pointer and pass
  -- parameters by reference.  Due to these facts SINP has a dummy
  -- parameter to catch the gsb and ASM code to dereference its argument
  -- which is in fact a pointer to the true argument.
  -- We use INTs as arguments for SINP because an INT has the same size
  -- as a pointer.

  REAL32 Xtemp :
  VALOF
    ASM
      LD       X
      LDNL     0
      ST       Xtemp
    RESULT SIN( Xtemp )
:
--}}}
#endif
