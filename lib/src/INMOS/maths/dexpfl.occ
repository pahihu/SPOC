#OPTION "V"  -- no vector space
#COMMENT "Floating point maths library, V1.1 27/03/90"
#COMMENT "(c) Copyright INMOS Limited 1988"
#INCLUDE "mathhdr.inc"
#ifdef C
#PRAGMA TRANSLATE DEXP "DEXP%c"
#else
#ifdef FORTRAN
#PRAGMA TRANSLATE DEXP "DEXP%f"
#PRAGMA TRANSLATE DEXPP "DEXPP%f"
#PRAGMA TRANSLATE DEXPPP "DEXPPP%f"
#endif
#endif

REAL64 FUNCTION DEXP (VAL REAL64 X)

  --{{{  history
  -- V1.0 1-Jul-88
  -- Added OPTION "V"; V1.1 27-Mar-90 SRH
  --}}}

  REAL64 RWork :
  VALOF
    IF
      DNOTFINITE (X)
        --{{{  deal with infs and NaNs
        INT order :
        SEQ
          order := DIEEECOMPARE (X, DZero)
          CASE order
            less.than
              RWork := DZero -- underflow
            greater.than
              RWork := DRInf -- overflow
            is.nan
              RWork := X     -- transmit NaN
        --}}}
      --{{{  definitions and variables
      -- XMax = 709.7827129999999442588887177407741546630859375
      VAL REAL64 XMax RETYPES #40862E42FF08893B(INT64) :
      VAL XMin IS 745.5(REAL64) : --   -ln(smallest real)
      VAL REAL64 DLn2     RETYPES #3FE62E42FEFA39EF(INT64) :
      VAL REAL64 DLn2.err RETYPES #3C7ABC9E3B39803F(INT64) :
      --}}}
      IF
        X > XMax
          RWork := DRInf
        DABS(X) > XMin -- if true, X must be negative
          --{{{  alternative responses
          -- RWork := MinDenorm    -- alternative response
          -- RWork := Dinexact.NaN -- alternative response
          --}}}
          RWork := DZero -- underflow
        TRUE  -- general case
          --{{{  rational approximation
          REAL64 XWork :
          INT32 N :
          SEQ
            BOOL ok :  -- it will be, because the range of X has been limited.
            ok, N, XWork := DARGUMENT.REDUCE (X, DLn2, DLn2.err)
            --{{{  coefficients
            VAL P2 IS 3.1555192765684646356E-5(REAL64) :
            VAL P1 IS 7.5753180159422776666E-3(REAL64) :
            VAL P0 IS 0.25(REAL64) :
            VAL Q3 IS 7.5104028399870046114E-7(REAL64) :
            VAL Q2 IS 6.3121894374398503557E-4(REAL64) :
            VAL Q1 IS 5.6817302698551221787E-2(REAL64) :
            VAL Q0 IS 0.5(REAL64) :
            --}}}
            VAL Z IS XWork * XWork :
            VAL GPZ IS ((((P2 * Z) + P1) * Z) + P0) * XWork :
            RWork := DSCALEB (Q0 +
                             (GPZ /(((((((Q3 * Z) + Q2) * Z) + Q1) * Z) + Q0) - GPZ)),
                              (INT N) + 1) -- N guarenteed small
          --}}}
    RESULT RWork
:
#ifdef FORTRAN
--{{{  DEXPP/DEXPPP
-- This 'P' version exists for when the FORTRAN intrinsic DEXP is passed as
-- a parameter to a routine.  The FORTRAN compiler will see the interface to
-- DEXPP.  When DEXPP is called from FORTRAN the default FORTRAN calling
-- conventions are used, i.e. pass a gsb pointer and pass parameters by
-- reference.  Due to these facts DEXPP has a dummy parameter to catch the gsb.
#ifdef FPU
-- On the T8 the REAL64 result is passed back on the floating point
-- stack by occam.  This is the same in FORTRAN and so no special code is
-- required here.  The dummy parameter comes first to take the gsb followed
-- by the REAL64 value.  The occam calling convention is to pass REAL64
-- by reference, so this parameter should match already.

REAL64 FUNCTION DEXPP( VAL INT dummy, VAL REAL64 X ) IS DEXP( X ) :
#else
-- On a non-floating point processor the REAL64 result is passed back by
-- way of a pointer to a result variable by both occam and FORTRAN.  If the
-- routine is written as a function then this result variable is expected
-- by occam to be the first parameter passed onto the stack.  This is not
-- the case in FORTRAN where the first parameter put onto the stack is
-- the gsb, the result parameter follows the gsb.  So the order of the
-- dummy and the result in occam is opposite to that in FORTRAN.   In order
-- to be able to pick up the result pointer we must write the routine as a
-- procedure and cope with the result pointer ourselves.  Therefore, the
-- first parameter is the dummy, the second is the result pointer.  Then
-- comes the REAL64 value.  The occam calling convention is to pass
-- REAL64s by reference, so this parameter should match already.

PROC DEXPPP( VAL INT dummy, REAL64 result, VAL REAL64 X )
  result := DEXP( X )
:
#endif
--}}}
#endif
