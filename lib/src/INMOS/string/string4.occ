#OPTION "E V" -- no compiler libraries, no vector space
#COMMENT "String library V1.2 21/08/90"
#COMMENT "(c) Copyright INMOS Limited 1988"
#USE "convert.lib"
--{{{  history
-- V1.0,  1-Jul-88
-- V1.1, 05-Jun-90 SRH
-- V1.2, 21-Aug-90; negative value for the field width made an explicit
-- error. SRH
--}}}
--{{{  append.int64
PROC append.int64 (INT len, []BYTE str, VAL INT64 number, VAL INT field)

  --{{{  specification
  -- Purpose:  To convert a 64-bit integer into its representation as ASCII
  --           decimal digits, with leading spaces if desired, and write
  --           this into a given string.
  -- In/Out:   len - on entry: the index of str at which the first character
  --           of the ASCII conversion of number is to be written; on exit:
  --           the index of str immediately after where the last character of
  --           the ASCII conversion of number was written, or SIZE str if
  --           this last character was written into the last positon of str
  -- Out:      str - the string into which the ASCII conversion of number is
  --           to be written
  -- In:       number - the 64-bit integer to be converted to an ASCII
  --           representation and then written into str
  -- In:       field - the field width of the ASCII representation of number:
  --           if number cannot be represented in field characters then the
  --           representation is widened as necessary; if field is larger
  --           than necessary then padding spaces are added on the left; it
  --           is an error for field to be negative
  -- Notes:    If str overflows then this routine acts as an invalid process.
  --           The conversion of number will include a minus sign if applicable.
  --}}}

  IF
    field < 0
      STOP
    TRUE
      [ 20 ] BYTE digits: -- 20 characters in MOSTNEG INT64 = -9223372036854775808
      INT length:
      SEQ
        INT64TOSTRING (length, digits, number)
        IF
          length < field
            SEQ
              SEQ i = len FOR (field - length)
                str[i] := ' '
              len := len + field
          TRUE
            len := len + length
        SEQ i = 1 FOR length
          str[len - i] := digits[length - i]
:
--}}}
--{{{  append.hex.int64
PROC append.hex.int64 (INT len, []BYTE str, VAL INT64 number, VAL INT width)

  --{{{  specification
  -- Purpose:  To convert a 64-bit integer into its representation as ASCII
  --           hexadecimal characters and write this into a given string.
  -- In/Out:   len - on entry: the index of str at which the first character
  --           of the ASCII hexadecimal of number is to be written; on exit:
  --           the index of str immediately after where the last character of
  --           the ASCII hexadecimal of number was written, or SIZE str if
  --           this last character was written into the last positon of str
  -- Out:      str - the string into which the hexadecimal ASCII form of
  --           number is to be written
  -- In:       number - the 64-bit integer to be converted to an ASCII
  --           hexadecimal representation and then written into str
  -- In:       width - the field width of the ASCII hexadecimal representation
  --           of number: if number cannot be represented in width characters
  --           then the representation is truncated at the left as necessary;
  --           otherwise the representation is padded on the left with 0's or
  --           F's to make up width characters; a negative value for width
  --           is an error
  -- Notes:    If str overflows then this routine acts as an invalid process.
  --           The conversion of number includes a # as the first character,
  --           so that the representation is always ( width + 1 ) characters.
  --           Any hexadecimal characters which are letters will be in upper
  --           case.
  --}}}

  IF
    width < 0
      STOP
    TRUE
      VAL nibbles.per.word IS 16:
      [nibbles.per.word]BYTE digits:
      INT length, pos, sig.digits:
      SEQ
        HEX64TOSTRING (length, digits, number)
        str [len] := '#'
        --{{{  leading digit fill
        IF
          width <= length
            SEQ
              pos := 1
              sig.digits := width
          TRUE
            --{{{  pad at left
            BYTE fill.digit:
            SEQ
              VAL [ 2 ]INT32 num RETYPES number : -- 5-Jun-90 SRH
              IF
                num[ 1 ] < 0(INT32)  -- save doing the INT64 comparison number < 0(INT64)
                  fill.digit := 'F'
                TRUE
                  fill.digit := '0'
              pos := width - length
              SEQ i = 1 FOR pos
                str [len + i] := fill.digit
              pos := pos + 1
              sig.digits := length
            --}}}
        --}}}
      
        [str FROM (len + pos) FOR sig.digits] := [digits FROM (length -
                            sig.digits) FOR sig.digits]
        len := len + (width + 1)
:
--}}}
