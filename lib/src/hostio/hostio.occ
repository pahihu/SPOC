--{{{  File banner
-- @(#)=====================================================
-- @(#)  Project : GPMIMD ESPRIT P5404
-- @(#)  Authors : Mark Debbage, Mark Hill and Sean Wykes
-- @(#)            University of Southampton
--  
-- @(#)    Title : SPOC hostio library
-- @(#)   System : Occam 2 C
-- @(#) Filename : hostio.occ
-- @(#)  Version : 1.1
-- @(#)     Date : 12/10/93
-- @(#)====================================================
--}}}
#INCLUDE "hostio.inc"

#USE "convert.lib"

#H #include <stdio.h>
#H #include <stdlib.h>
#H #include <time.h>
#H #if (OS == SUNOS)
#H #include <unistd.h>
#H #endif

--{{{  constants
VAL UNIX  IS TRUE :
VAL MSDOS IS FALSE :
VAL NULL  IS 0 (INT32) :
VAL EOF   IS -1 (INT) :
--}}}

--{{{  PROC so.mark.channels (CHAN OF SP fs,ts)
PROC so.mark.channels (CHAN OF SP fs,ts)
  INT16 i :
  [1]BYTE array :
  BOOL  never :
  SEQ
    never := FALSE
    IF
      never
	SEQ
	  SKIP--fs ! i :: array
	  --ts ? i :: array
      TRUE
	SKIP
:
--}}}
    
--{{{  screen output
--{{{  PROC so.write.char (CHAN OF SP fs,ts, VAL BYTE ch)
PROC so.write.char (CHAN OF SP fs,ts, VAL BYTE ch)
  SEQ
    so.mark.channels (fs,ts)
    #C putchar ($ch) ;
:  
--}}}

--{{{  PROC so.write.nl (CHAN OF SP fs,ts)
PROC so.write.nl (CHAN OF SP fs,ts)
  so.write.char (fs,ts,'*n')
:  
--}}}

--{{{  PROC so.write.string (CHAN OF SP fs,ts, VAL []BYTE string)
PROC so.write.string (CHAN OF SP fs,ts, VAL []BYTE string)
  SEQ i = 0 FOR SIZE string
    so.write.char (fs,ts,string[i])
:  
--}}}

--{{{  PROC so.write.string.nl (CHAN OF SP fs,ts, VAL []BYTE string)
PROC so.write.string.nl (CHAN OF SP fs,ts, VAL []BYTE string)
  SEQ
    so.write.string(fs,ts,string)
    so.write.nl(fs,ts)
:  
--}}}

--{{{  PROC so.write.int (CHAN OF SP fs,ts, VAL INT n, field)
PROC so.write.int (CHAN OF SP fs,ts, VAL INT n, field)
  IF
    field >= 0
      SEQ
	so.mark.channels (fs,ts)
	#C printf("%*d",$field,$n) ;
:
--}}}

--{{{  PROC so.write.int32 (CHAN OF SP fs,ts, VAL INT32 n, VAL INT field)
PROC so.write.int32 (CHAN OF SP fs,ts, VAL INT32 n, VAL INT field)
  so.write.int (fs,ts,INT n,field)
:
--}}}

--{{{  PROC so.write.hex.int (CHAN OF SP fs,ts, VAL INT n, field)
PROC so.write.hex.int (CHAN OF SP fs,ts, VAL INT n, field)
  IF
    field >= 0
      SEQ
	so.mark.channels (fs,ts)
	#C printf("#%0*X",$field,$n) ;
:
--}}}

--{{{  PROC so.write.hex.int32 (CHAN OF SP fs,ts, VAL INT32 n, VAL INT field)
PROC so.write.hex.int32 (CHAN OF SP fs,ts, VAL INT32 n, VAL INT field)
  so.write.hex.int (fs,ts,INT n,field)
:
--}}}

--{{{  PROC so.write.real32 (CHAN OF SP fs,ts, VAL REAL32 r, VAL INT Ip,Dp)
PROC so.write.real32 (CHAN OF SP fs,ts, VAL REAL32 r, VAL INT Ip,Dp)
  [24]BYTE buffer :
  INT len :
  SEQ
    REAL32TOSTRING (len,buffer,r,Ip,Dp)
    so.write.string (fs, ts, [buffer FROM 0 FOR len])
:    
--}}}

--{{{  PROC so.write.real64 (CHAN OF SP fs,ts, VAL REAL64 r, VAL INT Ip,Dp)
PROC so.write.real64 (CHAN OF SP fs,ts, VAL REAL64 r, VAL INT Ip,Dp)
  [30]BYTE buffer :
  INT len :
  SEQ
    REAL64TOSTRING (len,buffer,r,Ip,Dp)
    so.write.string (fs, ts, [buffer FROM 0 FOR len])
:    
--}}}

--{{{  PROC so.write.int64 (CHAN OF SP fs,ts, VAL INT64 r, VAL INT field)
PROC so.write.int64 (CHAN OF SP fs,ts, VAL INT64 r, VAL INT field)
  [30]BYTE buffer :
  INT len :
  SEQ
    INT64TOSTRING (len,buffer,r)
    so.write.string (fs, ts, [buffer FROM 0 FOR len])
:    
--}}}

--{{{  PROC so.write.hex.int64 (CHAN OF SP fs,ts, VAL INT64 r, VAL INT field)
PROC so.write.hex.int64 (CHAN OF SP fs,ts, VAL INT64 r, VAL INT field)
  [30]BYTE buffer :
  INT len :
  SEQ
    HEX64TOSTRING (len,buffer,r)
    so.write.string (fs, ts, [buffer FROM 0 FOR len])
:    
--}}}
--}}}

--{{{  file output
--{{{  PROC so.fwrite.char (CHAN OF SP fs,ts, VAL INT32 streamid, VAL BYTE ch, BYTE result)
PROC so.fwrite.char (CHAN OF SP fs,ts, VAL INT32 streamid, VAL BYTE ch, BYTE result)
  BOOL failed :
  SEQ
    so.mark.channels (fs,ts)
    #C $failed = (fputc($ch,(FILE*)$streamid) == EOF) ;

    IF
      failed
	result := spr.notok
      TRUE
	result := spr.ok
:  
--}}}

--{{{  PROC so.fwrite.nl (CHAN OF SP fs,ts, VAL INT32 streamid, BYTE result)
PROC so.fwrite.nl (CHAN OF SP fs,ts, VAL INT32 streamid, BYTE result)
  so.fwrite.char (fs,ts,streamid,'*n',result)
:  
--}}}

--{{{  PROC so.fwrite.string (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE string, BYTE result)
PROC so.fwrite.string (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE string, BYTE result)
  SEQ
    SEQ i = 0 FOR SIZE string
      so.fwrite.char (fs,ts,streamid,string[i],result)
:  
--}}}

--{{{  PROC so.fwrite.string.nl (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE string, BYTE result)
PROC so.fwrite.string.nl (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE string, BYTE result)
  SEQ
    so.fwrite.string(fs,ts,streamid,string,result)

    IF
      result = spr.ok
	so.fwrite.nl(fs,ts,streamid,result)
      TRUE
	SKIP
:
--}}}

--{{{  PROC so.fwrite.int (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT n, field, BYTE result)
PROC so.fwrite.int (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT n, field, BYTE result)
  IF
    field >= 0
      BOOL failed :
      SEQ
	so.mark.channels (fs,ts)
	#C $failed = (fprintf((FILE*)$streamid,"%*d",$field,$n) == EOF) ;

	IF
	  failed
	    result := spr.notok
	  TRUE
	    result := spr.ok
:
--}}}

--{{{  PROC so.fwrite.int32 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT32 n, VAL INT field, BYTE result)
PROC so.fwrite.int32 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT32 n, VAL INT field, BYTE result)
  so.fwrite.int (fs,ts,streamid,INT n,field,result)
:
--}}}


--{{{  PROC so.fwrite.hex.int (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT n, field, BYTE result)
PROC so.fwrite.hex.int (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT n, field, BYTE result)
  IF
    field >= 0
      BOOL failed :
      SEQ
	so.mark.channels (fs,ts)
	#C $failed = (fprintf((FILE*)$streamid,"#%0*X",$field,$n) == EOF) ;

	IF
	  failed
	    result := spr.notok
	  TRUE
	    result := spr.ok
:
--}}}

--{{{  PROC so.fwrite.hex.int32 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT32 n, VAL INT field, BYTE result)
PROC so.fwrite.hex.int32 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT32 n, VAL INT field, BYTE result)
  so.fwrite.hex.int (fs,ts,streamid,INT n,field,result)
:
--}}}

--{{{  PROC so.fwrite.real32 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL REAL32 r, VAL INT Ip,Dp, BYTE result)
PROC so.fwrite.real32 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL REAL32 r, VAL INT Ip,Dp, BYTE result)
  [24]BYTE buffer :
  INT len :
  SEQ
    REAL32TOSTRING (len,buffer,r,Ip,Dp)
    so.fwrite.string (fs, ts, streamid, [buffer FROM 0 FOR len], result)
:    
--}}}

--{{{  PROC so.fwrite.real64 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL REAL64 r, VAL INT Ip,Dp, BYTE result)
PROC so.fwrite.real64 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL REAL64 r, VAL INT Ip,Dp, BYTE result)
  [30]BYTE buffer :
  INT len :
  SEQ
    REAL64TOSTRING (len,buffer,r,Ip,Dp)
    so.fwrite.string (fs, ts, streamid, [buffer FROM 0 FOR len], result)
:    
--}}}

--{{{  PROC so.fwrite.int64 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT64 r, VAL INT field, BYTE result)
PROC so.fwrite.int64 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT64 r, VAL INT field, BYTE result)
  [30]BYTE buffer :
  INT len :
  SEQ
    INT64TOSTRING (len,buffer,r)
    so.fwrite.string (fs, ts, streamid, [buffer FROM 0 FOR len], result)
:    
--}}}

--{{{  PROC so.fwrite.hex.int64 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT64 r, VAL INT field, BYTE result)
PROC so.fwrite.hex.int64 (CHAN OF SP fs,ts, VAL INT32 streamid, VAL INT64 r, VAL INT field, BYTE result)
  [30]BYTE buffer :
  INT len :
  SEQ
    HEX64TOSTRING (len,buffer,r)
    so.fwrite.string (fs, ts, streamid, [buffer FROM 0 FOR len], result)
:    
--}}}
--}}}

--{{{  internal functions
--{{{  PROC MALLOC (INT32 pointer, VAL INT size)
PROC MALLOC (INT32 pointer, VAL INT size)
  #C $pointer = (INT32) malloc ($size);
:
--}}}

--{{{  PROC FREE (INT32 pointer)
PROC FREE (INT32 pointer)
  #C free((void*)$pointer);
:
--}}}

--{{{  PROC STRING.OCCAM.TO.C (VAL []BYTE occam, VAL INT32 c)
PROC STRING.OCCAM.TO.C (VAL []BYTE occam, VAL INT32 c)
  VAL size IS SIZE occam :
  SEQ
    SEQ i = 0 FOR size
      #C ((char *) $c)[$i] = $occam[$i];
    #C ((char *) $c)[$size] = '\0';
:
--}}}
--}}}
    
--{{{  file handling
--{{{  PROC so.open (CHAN OF SP fs,ts, VAL []BYTE name, VAL BYTE type, mode,
PROC so.open (CHAN OF SP fs,ts, VAL []BYTE name, VAL BYTE type, mode,
	      INT32 streamid, BYTE result)

  VAL options.max IS 3 :
  INT options.cnt :
  INT32 string :
  [options.max+1]BYTE options.str :
  SEQ
    so.mark.channels (fs,ts)

    result := spr.ok
    options.cnt := 0
  
    --{{{  build mode option
    CASE mode
      spm.input
	SEQ
	  options.str[options.cnt] := 'r'
	  options.cnt := options.cnt + 1
      spm.output
	SEQ
	  options.str[options.cnt] := 'w'
	  options.cnt := options.cnt + 1
      spm.append
	SEQ
	  options.str[options.cnt] := 'a'
	  options.cnt := options.cnt + 1
      spm.existing.update
	SEQ
	  [options.str FROM options.cnt FOR 2] := "r+"
	  options.cnt := options.cnt + 2
      spm.new.update
	SEQ
	  [options.str FROM options.cnt FOR 2] := "w+"
	  options.cnt := options.cnt + 2
      spm.append.update
	SEQ
	  [options.str FROM options.cnt FOR 2] := "a+"
	  options.cnt := options.cnt + 2
      ELSE
	result := spr.bad.mode
	  
    --}}}

    IF
      result = spr.ok
	SEQ
	  --{{{  build type option
	  CASE type
	    spt.binary
	      IF
		MSDOS
		  SEQ
		    options.str[options.cnt] := 'b'
		    options.cnt := options.cnt + 1
		UNIX
		  SKIP
	    spt.text
	      IF
		MSDOS
		  SEQ
		    options.str[options.cnt] := 't'
		    options.cnt := options.cnt + 1
		UNIX
		  SKIP
	    ELSE
	      result := spr.bad.type
	  --}}}

	  IF
	    result = spr.ok
	      SEQ
		--{{{  terminate options
		options.str[options.cnt] := '*#00'
		--}}}

		IF
		  (SIZE name) = 0
		    result := spr.bad.name
		  TRUE
		    SEQ
		      MALLOC (string,(SIZE name)+1)
		      
		      IF
			string = NULL
			  result := spr.operation.failed
			TRUE
			  SEQ
			    STRING.OCCAM.TO.C (name,string)
			    
			    #C $streamid = (INT32) fopen((char*)$string,(char*)$options.str);
		      
			    IF
			      streamid = NULL
				result := spr.operation.failed
			      TRUE
				SKIP
		      
			    FREE (string)
	    TRUE
	      SKIP
      TRUE
	SKIP
:
--}}}

--{{{  PROC so.close (CHAN OF SP fs,ts, INT32 streamid, BYTE result)
PROC so.close (CHAN OF SP fs,ts, INT32 streamid, BYTE result)

  INT r :
  SEQ
    so.mark.channels (fs,ts)
	       
    #C $r = fclose ((FILE*)$streamid);

    IF
      r = 0
	result := spr.ok
      TRUE
	result := spr.operation.failed
:
--}}}

--{{{  PROC so.test.exists (CHAN OF SP fs,ts, VAL []BYTE name, BOOL exists)
PROC so.test.exists (CHAN OF SP fs,ts, VAL []BYTE name, BOOL exists)

  BYTE  result :
  INT32 streamid :
  SEQ
    so.open (fs,ts,name,spt.binary,spm.input,streamid,result)

    IF
      result = spr.ok
	SEQ
	  so.close (fs,ts,streamid,result)
	  exists := TRUE
      TRUE
	exists := FALSE
:
    
--}}}

--{{{  PROC so.open.temp (CHAN OF SP fs,ts, VAL BYTE type, [so.temp.filename.length]BYTE filename,
PROC so.open.temp (CHAN OF SP fs,ts, VAL BYTE type, [so.temp.filename.length]BYTE filename,
		   INT32 streamid, BYTE result)
  INT num :
  BOOL searching :
  SEQ
    filename := "temp00"
    num := 0
    searching := TRUE
    result := spr.ok

    WHILE (searching)
      INT n,i :
      SEQ
	n := num
	i := 5
	WHILE (n > 0)
	  SEQ
	    filename[i] := BYTE ((n \ 10) + (INT '0'))
	    n := n / 10
	    i := i - 1

	so.test.exists (fs, ts, filename, searching)

	IF
	  searching
	    SEQ
	      num := num + 1
	      IF
		num = 10000
		  SEQ
		    searching := FALSE
		    result := spr.notok
		TRUE
		  SKIP
	  TRUE
	    SKIP

    IF
      result = spr.ok
	so.open (fs, ts, filename, type, spm.new.update, streamid, result)
      TRUE
	SKIP
:
--}}}

--{{{  PROC so.popen.read (CHAN OF SP fs,ts, VAL []BYTE filename, VAL []BYTE path.variable.name,
PROC so.popen.read (CHAN OF SP fs,ts, VAL []BYTE filename, VAL []BYTE path.variable.name,
		    VAL BYTE open.type, INT full.len, []BYTE full.name,
		    INT32 streamid, BYTE result)
  SEQ                    
    so.write.string.nl(fs,ts,"so.popen.read not implemented")
    result := spr.notok
:    
--}}}

--{{{  PROC so.write (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE data, INT length)
PROC so.write (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE data, INT length)

  VAL size IS SIZE data :
  SEQ
    so.mark.channels (fs,ts)

    #C $length = fwrite($data,1,$size,(FILE*)$streamid);
:
--}}}

--{{{  PROC so.read (CHAN OF SP fs,ts, VAL INT32 streamid, INT length, []BYTE data)
PROC so.read (CHAN OF SP fs,ts, VAL INT32 streamid, INT length, []BYTE data)

  VAL size IS SIZE data :
  SEQ
    so.mark.channels (fs,ts)

    #C $length = fread(&$data,1,$size,(FILE*)$streamid);
:
--}}}


--{{{  PROC so.gets (CHAN OF SP fs,ts, VAL INT32 streamid, INT length, []BYTE data, BYTE result)
PROC so.gets (CHAN OF SP fs,ts, VAL INT32 streamid, INT length, []BYTE data, BYTE result)

  BOOL reading :
  SEQ
    so.mark.channels (fs,ts)

    result  := spr.ok
    reading := TRUE
    length  := 0

    WHILE (reading)
      INT r :
      SEQ
	#C $r = fgetc((FILE*)$streamid);

	IF
	  r < 0
	    SEQ
	      result := spr.operation.failed
	      reading := FALSE
	  (BYTE r) = '*n'
	    reading := FALSE
	  TRUE
	    data[length] := (BYTE r)

	IF
	  (length+1) > (SIZE data)
	    SEQ
	      result := spr.buffer.overflow
	      reading := FALSE
	  TRUE
	    length := length + 1
:            

	


--}}}

--{{{  PROC so.puts (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE data, BYTE result)
PROC so.puts (CHAN OF SP fs,ts, VAL INT32 streamid, VAL []BYTE data, BYTE result)

  BOOL writing :
  INT  length :
  SEQ
    so.mark.channels (fs,ts)

    result  := spr.ok
    writing := TRUE
    length  := 0

    WHILE (writing AND (length < (SIZE data)))
      SEQ
	VAL b IS data[length] :
	INT r :
	SEQ
	  #C $r = fputc($b,(FILE*)$streamid);
	
	  IF
	    r < 0
	      SEQ
		result := spr.operation.failed
		writing := FALSE
	    TRUE
	      SKIP

	length := length + 1
:            
       
--}}}


--{{{  PROC so.flush (CHAN OF SP fs,ts, VAL INT32 streamid, BYTE result)
PROC so.flush (CHAN OF SP fs,ts, VAL INT32 streamid, BYTE result)

  INT r :
  SEQ
    so.mark.channels (fs,ts)

    #C $r = fflush ((FILE*)$streamid);

    IF
      r < 0
	result := spr.operation.failed
      TRUE
	result := spr.ok
:        
--}}}

--{{{  PROC so.seek (CHAN OF SP fs,ts, VAL INT32 streamid, offset, origin, BYTE result)
PROC so.seek (CHAN OF SP fs,ts, VAL INT32 streamid, offset, origin, BYTE result)

  INT org :
  SEQ
    so.mark.channels (fs,ts)

    result := spr.ok
    
    CASE origin
      spo.start
	#C $org = SEEK_SET;
      spo.current
	#C $org = SEEK_CUR;
      spo.end
	#C $org = SEEK_END;
      ELSE
	result := spr.bad.origin

    IF
      result = spr.ok
	INT r :
	SEQ
	  #C $r = fseek ((FILE*)$streamid, $offset, $org);

	  IF
	    r < 0
	      result := spr.operation.failed
	    TRUE
	      result := spr.ok
      TRUE
	SKIP
:        
--}}}

--{{{  PROC so.tell (CHAN OF SP fs,ts, VAL INT32 streamid, INT32 position, BYTE result)
PROC so.tell (CHAN OF SP fs,ts, VAL INT32 streamid, INT32 position, BYTE result)

  INT32 r :
  SEQ
    so.mark.channels (fs,ts)

    #C $r = (INT32) ftell ((FILE*)$streamid);

    IF
      r < (0(INT32))
	result := spr.operation.failed
      TRUE
	SEQ
	  result := spr.ok
	  position := r
:          
--}}}


--{{{  PROC so.eof (CHAN OF SP fs,ts, VAL INT32 streamid, BYTE result)
PROC so.eof (CHAN OF SP fs,ts, VAL INT32 streamid, BYTE result)

  INT r :
  SEQ
    so.mark.channels (fs,ts)

    #C $r = feof ((FILE *)$streamid);

    IF
      r <> 0
	result := spr.ok
      TRUE
	result := spr.operation.failed
:        
--}}}

--{{{  PROC so.ferror (CHAN OF SP fs,ts, VAL INT32 streamid, INT32 error.no,
PROC so.ferror (CHAN OF SP fs,ts, VAL INT32 streamid, INT32 error.no,
		INT length, []BYTE message, BYTE result)

  INT32 r :
  SEQ
    so.mark.channels (fs,ts)

    #C $r = (INT32) ferror ((FILE*)$streamid);

    IF
      r <> (0(INT32))
	SEQ
	  result := spr.ok
	  length := 0
	  error.no := r
      TRUE
	result := spr.operation.failed
:        
--}}}


--{{{  PROC so.remove (CHAN OF SP fs,ts, VAL []BYTE name, BYTE result)
PROC so.remove (CHAN OF SP fs,ts, VAL []BYTE name, BYTE result)

  SEQ
    so.mark.channels (fs,ts)

    IF
      (SIZE name) = 0
	result := spr.bad.name
      TRUE
	INT32 string :
	SEQ
	  MALLOC (string,(SIZE name)+1)

	  IF  
	    string = NULL
	      result := spr.operation.failed
	    TRUE
	      INT r:
	      SEQ
		STRING.OCCAM.TO.C (name,string)
		
		#C $r = remove((char*)$string);
	  
		IF
		  r = 0
		    result := spr.ok
		  TRUE
		    result := spr.operation.failed
	  
		FREE (string)
:
--}}}

--{{{  PROC so.rename (CHAN OF SP fs,ts, VAL []BYTE oldname, newname, BYTE result)
PROC so.rename (CHAN OF SP fs,ts, VAL []BYTE oldname, newname, BYTE result)

  SEQ
    so.mark.channels (fs,ts)

    IF
      ((SIZE oldname) = 0) OR ((SIZE newname) = 0)
	result := spr.bad.name
      TRUE
	INT32 old, new :
	SEQ
	  MALLOC (old,(SIZE oldname)+1)
	  MALLOC (new,(SIZE newname)+1)
	  
	  IF  
	    (old = NULL) OR (new = NULL)
	      result := spr.operation.failed
	    TRUE
	      INT r:
	      SEQ
		STRING.OCCAM.TO.C (oldname,old)
		STRING.OCCAM.TO.C (newname,new)
		
		#C $r = rename((char*)$old,(char*)$new);
	  
		IF
		  r = 0
		    result := spr.ok
		  TRUE
		    result := spr.operation.failed
	  
		FREE (old)
		FREE (new)
:
--}}}
--}}}

--{{{  general host access
--{{{  PROC so.commandline (CHAN OF SP fs,ts, VAL BYTE all, INT length, []BYTE string, BYTE result)
PROC so.commandline (CHAN OF SP fs,ts, VAL BYTE all, INT length, []BYTE string, BYTE result)

  INT start, i :
  VAL strlen IS SIZE string :
  
  SEQ
    so.mark.channels (fs,ts)

    result := spr.ok

    CASE all
      sp.short.commandline
	start := 1
      sp.whole.commandline
	start := 0
      ELSE
	result := spr.operation.failed

    IF
      result = spr.ok
	SEQ
	  length := 0

	  #C {
	  #C   extern int MAIN_ARGC;
	  #C   extern char **MAIN_ARGV;
	  #C   char *str = (char*) & $string;
	  #C   for ($i=$start;$i<MAIN_ARGC;$i++)
	  #C   {
	  #C     char *argv = MAIN_ARGV[$i];
	  #C     while($length < $strlen && *argv != '\0')
	  #C       str[($length)++] = *(argv++);
	  #C     if ($length < $strlen) str[($length)++] = ' ';
	  #C     else break ;
	  #C   }
	  #C }
	  
	  IF
	    length >= strlen
	      result := spr.buffer.overflow
	    TRUE
	      SKIP
      TRUE
	SKIP
:
--}}}

--{{{  PROC so.parse.command.line (CHAN OF SP fs,ts, VAL [][]BYTE option.strings,
PROC so.parse.command.line (CHAN OF SP fs,ts, VAL [][]BYTE option.strings,
			    VAL []INT option.parameters.required, []BOOL option.exists,
			    [][2]INT option.parameters, INT error.len, []BYTE line)
  SEQ                    
    so.write.string.nl(fs,ts,"so.parse.command.line not implemented")
:
--}}}

--{{{  PROC so.getenv (CHAN OF SP fs,ts, VAL []BYTE name, INT length, []BYTE value, BYTE result)
PROC so.getenv (CHAN OF SP fs,ts, VAL []BYTE name, INT length, []BYTE value, BYTE result)

  VAL strlen IS SIZE value:
  INT32 string :
  INT res :
  SEQ
    so.mark.channels (fs,ts)

    MALLOC (string,(SIZE name)+1)
    
    IF
      string = NULL
	result := spr.operation.failed
      TRUE
	SEQ
	  STRING.OCCAM.TO.C (name,string)
	  length := 0
	  res    := 0

	  #C {
	  #C   char *val = (char *) & $value;
	  #C   char *env = getenv ((char *) $string) ;
	  #C   if (env == NULL)
	  #C     $res = 1;
	  #C   else
	  #C   {
	  #C     while ($length < $strlen && *env != '\0')
	  #C       val[($length)++] = *(env++);
	  #C     if (*env != '\0') $res = 2;
	  #C   }
	  #C }

	  result := [spr.ok, spr.operation.failed, spr.buffer.overflow][res]
    
	  FREE (string)
:
--}}}

--{{{  PROC so.time (CHAN OF SP fs,ts. INT32 localtime, UTCtime)
PROC so.time (CHAN OF SP fs,ts, INT32 localtime, UTCtime)

  SEQ
    so.mark.channels (fs,ts)

    #C {
    #C   time_t now = time(NULL); 
    #C   $localtime = (INT32) now;
    #C   $UTCtime = (INT32) 0;
    #C }
:
--}}}

--{{{  PROC so.system (CHAN OF SP fs,ts, VAL []BYTE command, INT32 status, BYTE result)
PROC so.system (CHAN OF SP fs,ts, VAL []BYTE command, INT32 status, BYTE result)

  SEQ
    so.mark.channels (fs,ts)

    result := spr.ok

    IF
      (SIZE command) <> 0
	SEQ
	  #C $status = system ((char*)$command);
      TRUE      
	SKIP
:
--}}}

--{{{  PROC so.exit (CHAN OF SP fs,ts, VAL INT32 status)
PROC so.exit (CHAN OF SP fs,ts, VAL INT32 status)

  SEQ
    so.mark.channels (fs,ts)

    CASE status
      sps.success
	#C exit(0);
      sps.failure
	#C exit(-1);
      ELSE
	#C exit($status);
:
--}}}

--{{{  PROC so.core (CHAN OF SP fs,ts, VAL INT32 offset, INT bytes.read, []BYTE data, BYTE result)
PROC so.core (CHAN OF SP fs,ts, VAL INT32 offset, INT bytes.read, []BYTE data, BYTE result)

  SEQ
    so.mark.channels (fs,ts)
    so.write.string.nl (fs,ts,"so.core not implemented")

    result := spr.notok
:    
--}}}

--{{{  PROC so.version (CHAN OF SP fs,ts, BYTE version, host, os, board)
PROC so.version (CHAN OF SP fs,ts, BYTE version, host, os, board)

  SEQ
    --so.mark.channels (fs,ts)

    version := 0 (BYTE)
    
    #C #if (HOST == PC)
    host := sph.PC
    #C #elif (HOST == VAX)
    host := sph.VAX
    #C #elif (HOST == SUN3)
    host := sph.SUN3
    #C #elif (HOST == SUN4)
    host := sph.BOX.SUN4
    #C #else
    host := 0 (BYTE)
    #C #endif
    
    #C #if (OS == DOS)
    os := spo.DOS
    #C #elif (OS == VMS)
    os := spo.VMS
    #C #elif (OS == SUNOS)
    os := spo.SUNOS
    #C #else
    os := 0 (BYTE)
    #C #endif

    board := 0 (BYTE)
:    
--}}}
--}}}

--{{{  keyboard reading
--{{{  PROC so.getkey (CHAN OF SP fs,ts, BYTE key,result)
PROC so.getkey (CHAN OF SP fs,ts, BYTE key,result)

  INT c :
  SEQ
    so.mark.channels (fs,ts)
    #C  $c = getchar();

    IF
      c = EOF
	result := spr.operation.failed
      TRUE
	SEQ
	  key := BYTE c
	  result := spr.ok
:    
--}}}

--{{{  PROC so.read.echo.line (CHAN OF SP fs, ts, INT len, []BYTE line, BYTE result)
PROC so.read.echo.line (CHAN OF SP fs, ts, INT len, []BYTE line, BYTE result)
  VAL llen IS SIZE line:
  SEQ
    so.mark.channels(fs,ts)
    #C while((fgets((char*)(&$line),$llen,stdin))==NULL);
    #C $len = strlen((char*)(&$line));
    #C if ($len > 0 && (&$line)[$len-1]=='\n')
    #C   (&$line)[--$len] = 0;
    result := spr.ok
:
--}}}

--{{{  PROC so.read.echo.int (CHAN OF SP fs,ts, INT n, BOOL error)
PROC so.read.echo.int (CHAN OF SP fs,ts, INT n, BOOL error)

  INT r :
  [256]BYTE b :
  INT l :
  BYTE res :
  SEQ
    so.mark.channels (fs,ts)
    so.read.echo.line(fs,ts,l,b,res)
    #C $r = sscanf((char*)$b,"%d",& $n);
    error := NOT ((r=1) AND (res=spr.ok))
:    
--}}}

--{{{  PROC sp.getkey(CHAN OF SP fs,ts,BYTE key,BYTE result)
PROC sp.getkey(CHAN OF SP fs,ts,BYTE key, result)
  SEQ
    so.getkey(fs,ts,key,result)
:
    
    
--}}}
--}}}
