--{{{  File banner
-- @(#)=====================================================
-- @(#)  Project : GPMIMD ESPRIT P5404
-- @(#)  Authors : Mark Debbage, Mark Hill and Sean Wykes
-- @(#)            University of Southampton
--  
-- @(#)    Title : Intrinsics library
-- @(#)   System : Occam 2 C
-- @(#) Filename : Intrinsics.occ
-- @(#)  Version : 1.3
-- @(#)     Date : 1/31/94
-- @(#)====================================================

--}}}
#H #include <math.h>
#H #if defined(sun4)||defined(solaris)||defined(darwin)||defined(linux)
#H   #define have_mathfuncs 1
#H #else
#H   #define have_mathfuncs 0
#H #endif
INT FUNCTION LONGADD(VAL INT left, VAL INT right, VAL INT carry.in) IS (left+right) + (carry.in /\ 1) :
INT FUNCTION LONGSUB(VAL INT left, VAL INT right, VAL INT borrow.in) IS (left-right) - (borrow.in /\ 1) :

--{{{  INT FUNCTION ASHIFTRIGHT(VAL INT w, VAL INT places)
INT FUNCTION ASHIFTRIGHT(VAL INT w, VAL INT places)
  INT r :
  VALOF
    #C $r=$w>>$places;
    RESULT r
:
--}}}
--{{{  INT FUNCTION ASHIFTLEFT(VAL INT w, VAL INT places)
INT FUNCTION ASHIFTLEFT(VAL INT w, VAL INT places)
  INT r :
  VALOF
    #C $r=$w<<$places;
    RESULT r
:
--}}}
--{{{  INT FUNCTION ROTATERIGHT(VAL INT w, VAL INT places)
INT FUNCTION ROTATERIGHT(VAL INT w, VAL INT places)
  VAL []BYTE a RETYPES 0 :
  VAL bpw IS (SIZE a)*8 :
  VAL places IS places\bpw :
  VAL rest IS bpw-places :
  VALOF
    SKIP
    RESULT (w>>places)+(w<<rest) 
:
--}}}
--{{{  INT FUNCTION ROTATELEFT(VAL INT w, VAL INT places)
INT FUNCTION ROTATELEFT(VAL INT w, VAL INT places)
  VAL []BYTE a RETYPES 0 :
  VAL bpw IS (SIZE a)*8 :
  VAL places IS places\bpw :
  VAL rest IS bpw-places :
  VALOF
    SKIP
    RESULT (w<<places)+(w>>rest) 
:
--}}}
--{{{  INT,INT FUNCTION LONGSUM(VAL INT left, VAL INT right, VAL INT carry.in) 
INT,INT FUNCTION LONGSUM(VAL INT left, VAL INT right, VAL INT carry.in) 
  INT carry.out, sum :
  VALOF
    SEQ
      sum := (left PLUS right) PLUS (carry.in /\1)
      carry.out := INT ((((left<0) OR (right<0)) AND (sum>=0)) OR 
			((left<0) AND (right<0)))
    RESULT carry.out, sum
:
--}}}
--{{{  INT,INT FUNCTION LONGDIFF(VAL INT left, VAL INT right, VAL INT borrow.in) 
INT,INT FUNCTION LONGDIFF(VAL INT left, VAL INT right, VAL INT borrow.in) 
  INT borrow.out,diff :
  VALOF
    INT64 left.i,right.i,borrow.i,diff.i :
    VAL []BYTE word RETYPES 0 :
    VAL bpw IS (SIZE word)*8 :
    VAL mask IS ((1(INT64))<<bpw)-(1 (INT64)) :
    SEQ
      left.i := (INT64 left) /\ mask
      right.i := (INT64 right) /\ mask
      borrow.i := INT64 (borrow.in/\1)
      diff.i := (left.i - right.i) - borrow.i
      borrow.out := INT (diff.i<(0 (INT64)))
      -- next line suppress conversion check
      #C $diff = (INT) $diff.i;      
    RESULT borrow.out, diff 
:
--}}}
--{{{  INT,INT FUNCTION LONGPROD(VAL INT left, VAL INT right, VAL INT carry.in)
INT,INT FUNCTION LONGPROD(VAL INT left, VAL INT right, VAL INT carry.in)
  INT prod.lo,prod.hi :
  VALOF
    INT64 left.i,right.i,carry.i,prod.i :
    VAL []BYTE word RETYPES 0 :
    VAL bpw IS (SIZE word)*8 :
    VAL mask IS ((1(INT64))<<bpw)-(1 (INT64)) :
    SEQ  
      left.i := (INT64 left) /\ mask
      right.i := (INT64 right) /\ mask
      carry.i := (INT64 carry.in) /\ mask
      prod.i := (left.i * right.i) + carry.i
      VAL []INT prod.i.32 RETYPES prod.i :
      VAL []INT end RETYPES 1 (INT64) :
      SEQ
	prod.lo := prod.i.32[end[1]] -- endianness independent
	prod.hi := prod.i.32[end[0]] -- endianness independent
    RESULT prod.hi,prod.lo
:
--}}}
--{{{  INT,INT FUNCTION LONGDIV(VAL INT divhi, divlo, divisor)
INT,INT FUNCTION LONGDIV(VAL INT divhi, divlo, divisor)
  INT quot, rem :
  VALOF
    SEQ
      #C {
      #C   unsigned long long val,rem,quot;
      #C   val = (((unsigned long long)$divhi)<<32)|((unsigned long long)$divlo);
      #C   quot = val / ((unsigned long)$divisor);
      #C   rem = val % ((unsigned long)$divisor);
      #C   $quot = quot;
      #C   $rem = rem;
      #C }
    RESULT quot,rem
:
--}}}
--{{{  INT,INT FUNCTION SHIFTRIGHT(VAL INT hi, VAL INT lo, VAL INT places)
INT,INT FUNCTION SHIFTRIGHT(VAL INT hi, VAL INT lo, VAL INT places)
  VAL []BYTE a RETYPES 0 :
  VAL bpw IS (SIZE a)*8 :
  VAL rest IS bpw-places :
  VALOF
    SKIP
    RESULT hi>>places, (hi<<rest)+(lo>>places)
:
--}}}
--{{{  INT,INT FUNCTION SHIFTLEFT(VAL INT hi, VAL INT lo, VAL INT places)
INT,INT FUNCTION SHIFTLEFT(VAL INT hi, VAL INT lo, VAL INT places)
  VAL []BYTE a RETYPES 0 :
  VAL bpw IS (SIZE a)*8 :
  VAL rest IS bpw-places :
  VALOF
    SKIP
    RESULT (hi<<places)+(lo>>rest), lo<<places
:
--}}}
--{{{  INT,INT,INT FUNCTION NORMALISE(VAL INT hi.in, VAL INT lo.in)
INT,INT,INT FUNCTION NORMALISE(VAL INT hi.in, VAL INT lo.in)
  INT places,hi.out,lo.out :
  VALOF
    VAL []BYTE word RETYPES 0 :
    VAL bpw IS (SIZE word)*8 :
    SEQ
      hi.out,lo.out := hi.in,lo.in
      IF
	(hi.in=0) AND (lo.in = 0)
	  places := 2*bpw
	TRUE
	  SEQ
	    IF
	      hi.in=0
		SEQ
		  places := bpw
		  hi.out := lo.out
	      TRUE
		places:=0
	    VAL msb IS 1<<(bpw-1) :
	    WHILE (msb /\ hi.out)=0
	      SEQ
		places := places + 1
		hi.out := hi.out << 1
	    hi.out,lo.out := SHIFTLEFT(hi.in,lo.in,places)
    RESULT places,hi.out,lo.out
:
--}}}
--{{{  REAL32 FUNCTION ABS(VAL REAL32 x)
REAL32 FUNCTION ABS(VAL REAL32 x)
  REAL32 y :
  VALOF
    IF
      x<(0.0 (REAL32))
	y := -x
      TRUE
	y := x
    RESULT y
:
--}}}
--{{{  REAL64 FUNCTION DABS(VAL REAL64 x)
REAL64 FUNCTION DABS(VAL REAL64 x)
  REAL64 y :
  VALOF
    IF
      x<(0.0 (REAL64))
	y := -x
      TRUE
	y := x
    RESULT y
:
--}}}
--{{{  REAL32 FUNCTION SCALEB(VAL REAL32 x, VAL INT n)
REAL32 FUNCTION SCALEB(VAL REAL32 x, VAL INT n)
  REAL32 y :
  VALOF
    #C $y = (REAL32) ldexp($x,$n); 
    RESULT y
:
--}}}
--{{{  REAL64 FUNCTION DSCALEB(VAL REAL64 x, VAL INT n)
REAL64 FUNCTION DSCALEB(VAL REAL64 x, VAL INT n)
  REAL64 y :
  VALOF
    #C $y = (REAL64) ldexp($x,$n); 
    RESULT y
:
--}}}
--{{{  REAL32 FUNCTION COPYSIGN(VAL REAL32 x, VAL REAL32 y)
REAL32 FUNCTION COPYSIGN(VAL REAL32 x, VAL REAL32 y)
  REAL32 r :
  VALOF
    IF
      x>(0.0(REAL32))
	IF
	  y>(0.0(REAL32))
	    r := x
	  TRUE
	    r := -x
      TRUE
	IF
	  y>(0.0(REAL32))
	    r := -x
	  TRUE
	    r := x    
    RESULT r
:   
--}}}
--{{{  REAL64 FUNCTION DCOPYSIGN(VAL REAL64 x, VAL REAL64 y)
REAL64 FUNCTION DCOPYSIGN(VAL REAL64 x, VAL REAL64 y)
  REAL64 r :
  VALOF
    IF
      x>(0.0(REAL64))
	IF
	  y>(0.0(REAL64))
	    r := x
	  TRUE
	    r := -x
      TRUE
	IF
	  y>(0.0(REAL64))
	    r := -x
	  TRUE
	    r := x    
    RESULT r
:   
--}}}
--{{{  REAL32 FUNCTION SQRT(VAL REAL32 x)
REAL32 FUNCTION SQRT(VAL REAL32 x)
  REAL32 r :
  VALOF
    IF
      x>=(0.0 (REAL32))
	#C $r = (REAL32) sqrt($x);
    RESULT r
:
--}}}
--{{{  REAL64 FUNCTION DSQRT(VAL REAL64 x)
REAL64 FUNCTION DSQRT(VAL REAL64 x)
  REAL64 r :
  VALOF
    IF
      x>=(0.0 (REAL64))
	#C $r = (REAL64) sqrt($x);
    RESULT r
:
--}}}
--REAL32 FUNCTION MINUSX(VAL REAL32) :
--REAL64 FUNCTION DMINUSX(VAL REAL64) :
--REAL32 FUNCTION NEXTAFTER(VAL REAL32, VAL REAL32) :
  
--{{{  REAL64 FUNCTION DNEXTAFTER(VAL REAL64 x, VAL REAL64 y)
REAL64 FUNCTION DNEXTAFTER(VAL REAL64 x, VAL REAL64 y)
  REAL64 next :
  VALOF
    SEQ
      #C #if have_mathfuncs
      #C   $next = nextafter($x,$y);
      #C #else
      #C   SETERR("No nextafter function");
      #C #endif
    RESULT next
:
--}}}
--{{{  REAL32 FUNCTION REAL32OP(VAL REAL32 x,VAL INT op,VAL REAL32 y)
REAL32 FUNCTION REAL32OP(VAL REAL32 x,VAL INT op,VAL REAL32 y)
  REAL32 res :
  VALOF
    IF
      op=0
	res := x+y
      op=1
	res := x-y
      op=2
	res := x*y
      op=3
	res := x/y
    RESULT res
:
--}}}
--{{{  REAL64 FUNCTION REAL64OP(VAL REAL64 x,VAL INT op,VAL REAL64 y)
REAL64 FUNCTION REAL64OP(VAL REAL64 x,VAL INT op,VAL REAL64 y)
  REAL64 res :
  VALOF
    IF
      op=0
	res := x+y
      op=1
	res := x-y
      op=2
	res := x*y
      op=3
	res := x/y
    RESULT res
:
--}}}
      
BOOL,REAL32 FUNCTION IEEE32OP(VAL REAL32 x,VAL INT Rm, VAL INT op,VAL REAL32 y) IS FALSE,REAL32OP(x,op,y) :
BOOL,REAL64 FUNCTION IEEE64OP(VAL REAL64 x,VAL INT Rm,VAL INT op,VAL REAL64 y) IS FALSE,REAL64OP(x,op,y) :
--{{{  REAL32 FUNCTION REAL32REM(VAL REAL32 x, VAL REAL32 y)
REAL32 FUNCTION REAL32REM(VAL REAL32 x, VAL REAL32 y)
  REAL32 res :
  VALOF 
    SEQ
      #C #if have_mathfuncs
      #C   $res = remainder($x,$y);
      #C #else
      #C   SETERR("remainder function");
      #C #endif
    RESULT res
: 
--}}}
--{{{  REAL64 FUNCTION REAL64REM(VAL REAL64 x, VAL REAL64 y)
REAL64 FUNCTION REAL64REM(VAL REAL64 x, VAL REAL64 y)
  REAL64 res :
  VALOF 
    SEQ
      #C #if have_mathfuncs
      #C   $res = remainder($x,$y);
      #C #else
      #C   SETERR("remainder function");
      #C #endif
    RESULT res
: 
--}}}
--{{{  REAL32 FUNCTION IEEE32REM(VAL REAL32 x, VAL REAL32 y)
BOOL,REAL32 FUNCTION IEEE32REM(VAL REAL32 x, VAL REAL32 y)
  REAL32 res :
  VALOF 
    SEQ
      #C #if have_mathfuncs
      #C   $res = remainder($x,$y);
      #C #else
      #C   SETERR("remainder function");
      #C #endif
    RESULT FALSE,res
: 
--}}}
--{{{  BOOL,REAL64 FUNCTION IEEE64REM(VAL REAL64 x, VAL REAL64 y)
BOOL,REAL64 FUNCTION IEEE64REM(VAL REAL64 x, VAL REAL64 y)
  REAL64 res :
  VALOF 
    SEQ
      #C #if have_mathfuncs
      #C   $res = remainder($x,$y);
      #C #else
      #C   SETERR("remainder function");
      #C #endif
    RESULT FALSE,res
: 
--}}}
BOOL FUNCTION REAL32EQ(VAL REAL32 x, VAL REAL32 y) IS x=y :
BOOL FUNCTION REAL64EQ(VAL REAL64 x, VAL REAL64 y) IS x=y :
BOOL FUNCTION REAL32GT(VAL REAL32 x, VAL REAL32 y) IS x>y :
BOOL FUNCTION REAL64GT(VAL REAL64 x, VAL REAL64 y) IS x>y :
--{{{  INT FUNCTION IEEECOMPARE(VAL REAL32 x, VAL REAL32 y)
INT FUNCTION IEEECOMPARE(VAL REAL32 x, VAL REAL32 y)
  INT result :
  VALOF
    IF
      x=y
	result := 0
      x>y
	result := 1
      TRUE
	result := -1
    RESULT result
:
--}}}
--{{{  INT FUNCTION DIEEECOMPARE(VAL REAL64 x, VAL REAL64 y)
INT FUNCTION DIEEECOMPARE(VAL REAL64 x, VAL REAL64 y)
  INT result :
  VALOF
    IF
      x=y
	result := 0
      x>y
	result := 1
      TRUE
	result := -1
    RESULT result
:
--}}}

--{{{  REAL32 FUNCTION LOGB (VAL REAL32 X)
REAL32 FUNCTION LOGB (VAL REAL32 X)
  REAL32 result :
  VALOF
    SEQ
      #C #if have_mathfuncs
      #C $result = (REAL32) ilogb ((double) $X);
      #C #else
      #C SETERR("LOGB not implemented");
      #C #endif
    RESULT result
:    
--}}}
--{{{  REAL32 FUNCTION DLOGB (VAL REAL64 X)
REAL32 FUNCTION DLOGB (VAL REAL64 X)
  REAL32 result :
  VALOF
    SEQ
      #C #if have_mathfuncs
      #C $result = (REAL64) ilogb ($X);
      #C #else
      #C SETERR("LOGB not implemented");
      #C #endif
    RESULT result
:    
--}}}

--MULBY2
--DIVBY2
--FPINT

--{{{  BOOL FUNCTION ISNAN (VAL REAL32 X)
BOOL FUNCTION ISNAN (VAL REAL32 X)
  BOOL result :
  VALOF
    SEQ
      #C #if have_mathfuncs
      #C $result = isnan ((double) $X);
      #C #else
      #C SETERR("ISNAN not implemented");
      #C #endif
    RESULT result
:    
--}}}
--{{{  BOOL FUNCTION DISNAN (VAL REAL64 X)
BOOL FUNCTION DISNAN (VAL REAL64 X)
  BOOL result :
  VALOF
    SEQ
      #C #if have_mathfuncs
      #C $result = isnan ($X);
      #C #else
      #C SETERR("DISNAN not implemented");
      #C #endif
    RESULT result
:    
--}}}

--{{{  BOOL FUNCTION NOTFINITE (VAL REAL32 X)
BOOL FUNCTION NOTFINITE (VAL REAL32 X)
  BOOL result :
  VALOF
    SEQ
      #C #if (defined sun4)
      #C $result = isinf ((double) $X);
      #C #else
      #C SETERR("NOTFINITE not implemented");
      #C #endif
    RESULT result
:    
--}}}
--{{{  BOOL FUNCTION DNOTFINITE (VAL REAL64 X)
BOOL FUNCTION DNOTFINITE (VAL REAL64 X)
  BOOL result :
  VALOF
    SEQ
      #C #if (defined sun4)
      #C $result = isinf ($X);
      #C #else
      #C SETERR("DNOTFINITE not implemented");
      #C #endif
    RESULT result
:    
--}}}

BOOL FUNCTION ORDERED(VAL REAL32 X,Y) IS NOT(ISNAN(X) OR ISNAN(Y)) :
BOOL FUNCTION DORDERED(VAL REAL64 X,Y) IS NOT(DISNAN(X) OR DISNAN(Y)) :
  
--{{{  INT FUNCTION BITCOUNT(VAL INT Word, CountIn)
INT FUNCTION BITCOUNT(VAL INT Word, CountIn)
  INT n,W :
  VALOF
    VAL []BYTE w RETYPES 0 :
    VAL bpw IS 8*(SIZE w) :
    SEQ
      W := Word
      n := 0
      SEQ i = 0 FOR bpw
	SEQ
	  n := n + (W BITAND 1)
	  W := W >> 1
    RESULT CountIn+n
:      
--}}}
--{{{  INT FUNCTION BITREVNBITS(VAL INT x,n)
INT FUNCTION BITREVNBITS(VAL INT x,n)
  INT r :
  INT X :
  VALOF
    SEQ
      X := x
      r := 0
      SEQ i = 0 FOR n
	SEQ
	  r := r<<1
	  r := r + (X BITAND 1)
	  X := X>>1
    RESULT r
:
--}}}
--{{{  INT FUNCTION BITREVWORD(VAL INT x)
INT FUNCTION BITREVWORD(VAL INT x)
  VAL []BYTE w RETYPES 0 :
  VAL bpw IS 8*(SIZE w) :
  VALOF
    SKIP
    RESULT BITREVNBITS(x,bpw)
:      
--}}}

--CRCWORD
--CRCBYTE
--FRACMUL
--ROUNDSN
--UNPACKSN
--ROUNDSN

--{{{  PROC ASSERT(VAL BOOL test)
PROC ASSERT(VAL BOOL test)
  IF
    test
      SKIP
    TRUE
      #C SETERR("Assertion Failed\n");
:
--}}}
--{{{  PROC CAUSEERROR()
PROC CAUSEERROR()
  #C SETERR("CAUSEERROR() Called");
: 
--}}}
--{{{  PROC RESCHEDULE()
PROC RESCHEDULE()
  PAR
    SKIP
:
--}}}
